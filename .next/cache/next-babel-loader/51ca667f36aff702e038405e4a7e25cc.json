{"ast":null,"code":"import { all, delay, fork, put, takeEvery } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { SELECT_STADIUM_FAILURE, SELECT_STADIUM_REQUEST, SELECT_STADIUM_SUCCESS, ENROLL_STADIUM_FAILURE, ENROLL_STADIUM_REQUEST, ENROLL_STADIUM_SUCCESS, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE } from '../reducers/stadium';\nconst dummyComment = [{\n  datetime: \"2020-04-26\",\n  content: \"깔끔하고 너무 좋습니다\",\n  avatar: \"우기재\",\n  author: \"우기재\",\n  rating: 5\n}, {\n  datetime: \"2020-04-25\",\n  content: \"꽤괜;\",\n  avatar: \"뚜요니\",\n  author: \"뚜요니\",\n  rating: 4\n}, {\n  datetime: \"2020-04-25\",\n  content: \"약간 좁은 듯한 느낌\",\n  avatar: \"우기재\",\n  author: \"우기재\",\n  rating: 3\n}, {\n  datetime: \"2020-04-24\",\n  content: \"깔끔하고 너무 좋습니다\",\n  avatar: \"우기재\",\n  author: \"우기재\",\n  rating: 4\n}, {\n  datetime: \"2020-04-23\",\n  content: \"정류장에서 조금 걸어야 합니다\",\n  avatar: \"뚜요니\",\n  author: \"뚜요니\",\n  rating: 5\n}];\n\nfunction selectAPI() {\n  // 서버에 요청을 보내는 부분\n  return axios.post('/stadium');\n}\n\nfunction* select() {\n  try {\n    // yield call(selectAPI);\n    yield delay(2000);\n    yield put({\n      // put은 dispatch 동일\n      type: SELECT_STADIUM_SUCCESS,\n      data: dummyComment\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: SELECT_STADIUM_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchSelect() {\n  yield takeEvery(SELECT_STADIUM_REQUEST, select);\n}\n\nfunction enrollAPI() {\n  // 서버에 요청을 보내는 부분\n  return axios.post('/stadium/register');\n}\n\nfunction* enroll() {\n  try {\n    // yield call(enrollAPI);\n    yield delay(2000);\n    throw new Error('에러에러에러');\n    yield put({\n      // put은 dispatch 동일\n      type: ENROLL_STADIUM_SUCCESS\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: ENROLL_STADIUM_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchEnroll() {\n  yield takeEvery(ENROLL_STADIUM_REQUEST, enroll);\n} ///////////////////////////////////////////////////////\n\n\nfunction addCommentAPI(data) {\n  return axios.post(`/stadium/`, data);\n}\n\nfunction* add(action) {\n  try {\n    // yield call(addCommentAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: [...dummyComment, action.data]\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeEvery(ADD_COMMENT_REQUEST, add);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchSelect), fork(watchEnroll), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["/Users/kcho/Desktop/react-futchall/front/sagas/stadium.js"],"names":["all","delay","fork","put","takeEvery","axios","SELECT_STADIUM_FAILURE","SELECT_STADIUM_REQUEST","SELECT_STADIUM_SUCCESS","ENROLL_STADIUM_FAILURE","ENROLL_STADIUM_REQUEST","ENROLL_STADIUM_SUCCESS","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","dummyComment","datetime","content","avatar","author","rating","selectAPI","post","select","type","data","e","console","error","watchSelect","enrollAPI","enroll","Error","watchEnroll","addCommentAPI","add","action","watchAddComment","userSaga"],"mappings":"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","sourcesContent":["import { all, delay, fork, put, takeEvery } from 'redux-saga/effects';\nimport axios from 'axios';\nimport {\n    SELECT_STADIUM_FAILURE,\n    SELECT_STADIUM_REQUEST,\n    SELECT_STADIUM_SUCCESS,\n    ENROLL_STADIUM_FAILURE,\n    ENROLL_STADIUM_REQUEST,\n    ENROLL_STADIUM_SUCCESS,\n    ADD_COMMENT_REQUEST,\n    ADD_COMMENT_SUCCESS,\n    ADD_COMMENT_FAILURE,\n} from '../reducers/stadium';\n\nconst dummyComment=[\n    {\n        datetime:\"2020-04-26\",\n        content:\"깔끔하고 너무 좋습니다\",\n        avatar:\"우기재\",\n        author:\"우기재\",\n        rating:5,\n    },\n    {\n        datetime:\"2020-04-25\",\n        content:\"꽤괜;\",\n        avatar:\"뚜요니\",\n        author:\"뚜요니\",\n        rating:4,\n    },\n    {\n        datetime:\"2020-04-25\",\n        content:\"약간 좁은 듯한 느낌\",\n        avatar:\"우기재\",\n        author:\"우기재\",\n        rating:3,\n    },\n    {\n        datetime:\"2020-04-24\",\n        content:\"깔끔하고 너무 좋습니다\",\n        avatar:\"우기재\",\n        author:\"우기재\",\n        rating:4,\n    },\n    {\n        datetime:\"2020-04-23\",\n        content:\"정류장에서 조금 걸어야 합니다\",\n        avatar:\"뚜요니\",\n        author:\"뚜요니\",\n        rating:5,\n    },\n]\nfunction selectAPI() {\n  // 서버에 요청을 보내는 부분\n    return axios.post('/stadium');\n}\n\nfunction* select() {\n    try {\n        // yield call(selectAPI);\n        yield delay(2000);\n        yield put({ // put은 dispatch 동일\n            type: SELECT_STADIUM_SUCCESS,\n            data:dummyComment,\n        });\n    } catch (e) {\n        console.error(e);\n        yield put({\n            type: SELECT_STADIUM_FAILURE,\n            error:e,\n        });\n    }\n}\n\nfunction* watchSelect() {\n    yield takeEvery(SELECT_STADIUM_REQUEST, select);\n}\n\nfunction enrollAPI() {\n  // 서버에 요청을 보내는 부분\n    return axios.post('/stadium/register');\n}\n\nfunction* enroll() {\n    try {\n        // yield call(enrollAPI);\n        yield delay(2000);\n        throw new Error('에러에러에러');\n        yield put({ // put은 dispatch 동일\n            type: ENROLL_STADIUM_SUCCESS,\n        });\n    } catch (e) { // loginAPI 실패\n        console.error(e);\n        yield put({\n            type: ENROLL_STADIUM_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction* watchEnroll() {\n    yield takeEvery(ENROLL_STADIUM_REQUEST, enroll);\n}\n///////////////////////////////////////////////////////\nfunction addCommentAPI(data){\n    return axios.post(`/stadium/`, data);\n}\n\nfunction* add(action){\n    try{\n        // yield call(addCommentAPI, action.data);\n        yield delay(1000);\n        yield put({\n            type:ADD_COMMENT_SUCCESS,\n            data:[...dummyComment, action.data]\n        });\n    }catch(e){\n        yield put({\n            type:ADD_COMMENT_FAILURE,\n            error:e,\n        })\n    }\n}\nfunction* watchAddComment(){\n    yield takeEvery(ADD_COMMENT_REQUEST, add);\n}\nexport default function* userSaga() {\n    yield all([\n        fork(watchSelect),\n        fork(watchEnroll),\n        fork(watchAddComment),\n    ]);\n}\n"]},"metadata":{},"sourceType":"module"}