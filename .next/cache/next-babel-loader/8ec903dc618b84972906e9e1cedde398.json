{"ast":null,"code":"var _jsxFileName = \"/Users/kcho/Desktop/react-futchall/front/components/Maps.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { message } from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\n\nconst Maps = () => {\n  useEffect(() => {\n    // 지도 위치에 따른 데이터 가져와야 해 redux-saga\n    let lat = '37.5795876';\n    let lng = '126.9636324';\n    const container = document.getElementById(\"mapContainer\");\n    let options;\n    let map;\n    (async function (x) {\n      // async function 표현식을 IIFE로 사용\n      if (x) {\n        x.getCurrentPosition(pos => {\n          lat = pos.coords.latitude;\n          lng = pos.coords.longitude;\n          message.success(\"현재 접속위치를 중심으로 지도를 활성화하였습니다.\");\n        }, () => {\n          message.warn(\"위치정보제공을 동의하시고 현재위치 주변 구장을 확인하세요.\");\n        });\n      } else {\n        message.error(\"현재 브라우저에서는 현재위치 사용이 불가능합니다.\");\n      }\n\n      return lat, lng;\n    })(navigator.geolocation).then((lat, lng) => {\n      options = {\n        center: new kakao.maps.LatLng(lat, lng),\n        level: 5\n      };\n      map = new kakao.maps.Map(container, options);\n    }); // if (navigator.geolocation) {\n    //     navigator.geolocation.getCurrentPosition(function (pos) {\n    //         lat = pos.coords.latitude;     // 위도\n    //         lng = pos.coords.longitude; // 경도\n    //         options = {\n    //             center: new kakao.maps.LatLng(lat, lng),\n    //             level: 5\n    //         };\n    //         map = new kakao.maps.Map(container, options);\n    //         message.success(\"현재 접속위치를 중심으로 지도를 활성화하였습니다.\");\n    //     }, function () {\n    //         options = {\n    //             center: new kakao.maps.LatLng(lat, lng),\n    //             level: 5\n    //         };\n    //         map = new kakao.maps.Map(container, options);\n    //         message.warn(\"위치정보제공을 동의하시고 현재위치 주변 구장을 확인하세요.\");\n    //     });\n    // } else {\n    //     options = {\n    //         center: new kakao.maps.LatLng(lat, lng),\n    //         level: 5\n    //     };\n    //     map = new kakao.maps.Map(container, options);\n    //     message.error(\"현재 브라우저에서는 현재위치 사용이 불가능합니다.\");\n    // }\n    // // 마커 클러스터러를 생성합니다 \n    // var clusterer = new kakao.maps.MarkerClusterer({\n    //     map: map, // 마커들을 클러스터로 관리하고 표시할 지도 객체 \n    //     averageCenter: true, // 클러스터에 포함된 마커들의 평균 위치를 클러스터 마커 위치로 설정 \n    //     minLevel: 10 // 클러스터 할 최소 지도 레벨 \n    // });\n    // // 데이터를 가져오기 위해 jQuery를 사용합니다\n    // // 데이터를 가져와 마커를 생성하고 클러스터러 객체에 넘겨줍니다\n    // $.get(\"/download/web/data/chicken.json\", function (data) {\n    //     // 데이터에서 좌표 값을 가지고 마커를 표시합니다\n    //     // 마커 클러스터러로 관리할 마커 객체는 생성할 때 지도 객체를 설정하지 않습니다\n    //     var markers = $(data.positions).map(function (i, position) {\n    //         return new kakao.maps.Marker({\n    //             position: new kakao.maps.LatLng(position.lat, position.lng)\n    //         });\n    //     });\n    //     // 클러스터러에 마커들을 추가합니다\n    //     clusterer.addMarkers(markers);\n    // });\n  });\n  return __jsx(\"div\", {\n    id: \"mapContainer\",\n    style: {\n      height: '70vh',\n      textAlign: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, __jsx(LoadingOutlined, {\n    style: {\n      margin: '0 auto',\n      width: '10vh',\n      height: '10vh'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default Maps;","map":{"version":3,"sources":["/Users/kcho/Desktop/react-futchall/front/components/Maps.js"],"names":["React","useState","useEffect","message","LoadingOutlined","Maps","lat","lng","container","document","getElementById","options","map","x","getCurrentPosition","pos","coords","latitude","longitude","success","warn","error","navigator","geolocation","then","center","kakao","maps","LatLng","level","Map","height","textAlign","margin","width"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,MAAxB;AACA,SAASC,eAAT,QAAgC,mBAAhC;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAEfH,EAAAA,SAAS,CACL,MAAM;AACF;AACA,QAAII,GAAG,GAAG,YAAV;AACA,QAAIC,GAAG,GAAG,aAAV;AACA,UAAMC,SAAS,GAAGC,QAAQ,CAACC,cAAT,CAAwB,cAAxB,CAAlB;AACA,QAAIC,OAAJ;AACA,QAAIC,GAAJ;AACA,KAAC,gBAAgBC,CAAhB,EAAmB;AAAE;AAClB,UAAIA,CAAJ,EAAO;AACHA,QAAAA,CAAC,CAACC,kBAAF,CAAqBC,GAAG,IAAI;AACxBT,UAAAA,GAAG,GAAGS,GAAG,CAACC,MAAJ,CAAWC,QAAjB;AACAV,UAAAA,GAAG,GAAGQ,GAAG,CAACC,MAAJ,CAAWE,SAAjB;AACAf,UAAAA,OAAO,CAACgB,OAAR,CAAgB,6BAAhB;AACH,SAJD,EAIG,MAAM;AACLhB,UAAAA,OAAO,CAACiB,IAAR,CAAa,kCAAb;AACH,SAND;AAOH,OARD,MAQO;AACHjB,QAAAA,OAAO,CAACkB,KAAR,CAAc,6BAAd;AACH;;AACD,aAAOf,GAAG,EAAEC,GAAZ;AACH,KAbD,EAaGe,SAAS,CAACC,WAbb,EAa0BC,IAb1B,CAa+B,CAAClB,GAAD,EAAMC,GAAN,KAAc;AACzCI,MAAAA,OAAO,GAAG;AACNc,QAAAA,MAAM,EAAE,IAAIC,KAAK,CAACC,IAAN,CAAWC,MAAf,CAAsBtB,GAAtB,EAA2BC,GAA3B,CADF;AAENsB,QAAAA,KAAK,EAAE;AAFD,OAAV;AAIAjB,MAAAA,GAAG,GAAG,IAAIc,KAAK,CAACC,IAAN,CAAWG,GAAf,CAAmBtB,SAAnB,EAA8BG,OAA9B,CAAN;AACH,KAnBD,EAPE,CA2BF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACH,GA5EI,CAAT;AA8EA,SACI;AAAK,IAAA,EAAE,EAAC,cAAR;AAAuB,IAAA,KAAK,EAAE;AAAEoB,MAAAA,MAAM,EAAE,MAAV;AAAkBC,MAAAA,SAAS,EAAE;AAA7B,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,eAAD;AAAiB,IAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAE,QAAV;AAAoBC,MAAAA,KAAK,EAAE,MAA3B;AAAmCH,MAAAA,MAAM,EAAE;AAA3C,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAKH,CArFD;;AAuFA,eAAe1B,IAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { message } from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\n\nconst Maps = () => {\n\n    useEffect(\n        () => {\n            // 지도 위치에 따른 데이터 가져와야 해 redux-saga\n            let lat = '37.5795876';\n            let lng = '126.9636324';\n            const container = document.getElementById(\"mapContainer\");\n            let options;\n            let map;\n            (async function (x) { // async function 표현식을 IIFE로 사용\n                if (x) {\n                    x.getCurrentPosition(pos => {\n                        lat = pos.coords.latitude;\n                        lng = pos.coords.longitude;\n                        message.success(\"현재 접속위치를 중심으로 지도를 활성화하였습니다.\");\n                    }, () => {\n                        message.warn(\"위치정보제공을 동의하시고 현재위치 주변 구장을 확인하세요.\");\n                    })\n                } else {\n                    message.error(\"현재 브라우저에서는 현재위치 사용이 불가능합니다.\");\n                }\n                return lat, lng;\n            })(navigator.geolocation).then((lat, lng) => {\n                options = {\n                    center: new kakao.maps.LatLng(lat, lng),\n                    level: 5\n                };\n                map = new kakao.maps.Map(container, options);\n            });\n            // if (navigator.geolocation) {\n            //     navigator.geolocation.getCurrentPosition(function (pos) {\n            //         lat = pos.coords.latitude;     // 위도\n            //         lng = pos.coords.longitude; // 경도\n            //         options = {\n            //             center: new kakao.maps.LatLng(lat, lng),\n            //             level: 5\n            //         };\n            //         map = new kakao.maps.Map(container, options);\n            //         message.success(\"현재 접속위치를 중심으로 지도를 활성화하였습니다.\");\n            //     }, function () {\n            //         options = {\n            //             center: new kakao.maps.LatLng(lat, lng),\n            //             level: 5\n            //         };\n            //         map = new kakao.maps.Map(container, options);\n            //         message.warn(\"위치정보제공을 동의하시고 현재위치 주변 구장을 확인하세요.\");\n            //     });\n            // } else {\n            //     options = {\n            //         center: new kakao.maps.LatLng(lat, lng),\n            //         level: 5\n            //     };\n            //     map = new kakao.maps.Map(container, options);\n            //     message.error(\"현재 브라우저에서는 현재위치 사용이 불가능합니다.\");\n            // }\n\n            // // 마커 클러스터러를 생성합니다 \n            // var clusterer = new kakao.maps.MarkerClusterer({\n            //     map: map, // 마커들을 클러스터로 관리하고 표시할 지도 객체 \n            //     averageCenter: true, // 클러스터에 포함된 마커들의 평균 위치를 클러스터 마커 위치로 설정 \n            //     minLevel: 10 // 클러스터 할 최소 지도 레벨 \n            // });\n\n            // // 데이터를 가져오기 위해 jQuery를 사용합니다\n            // // 데이터를 가져와 마커를 생성하고 클러스터러 객체에 넘겨줍니다\n            // $.get(\"/download/web/data/chicken.json\", function (data) {\n            //     // 데이터에서 좌표 값을 가지고 마커를 표시합니다\n            //     // 마커 클러스터러로 관리할 마커 객체는 생성할 때 지도 객체를 설정하지 않습니다\n            //     var markers = $(data.positions).map(function (i, position) {\n            //         return new kakao.maps.Marker({\n            //             position: new kakao.maps.LatLng(position.lat, position.lng)\n            //         });\n            //     });\n\n            //     // 클러스터러에 마커들을 추가합니다\n            //     clusterer.addMarkers(markers);\n            // });\n        }\n    );\n    return (\n        <div id=\"mapContainer\" style={{ height: '70vh', textAlign: 'center' }}>\n            <LoadingOutlined style={{ margin: '0 auto', width: '10vh', height: '10vh' }} />\n        </div>\n    );\n};\n\nexport default Maps;"]},"metadata":{},"sourceType":"module"}