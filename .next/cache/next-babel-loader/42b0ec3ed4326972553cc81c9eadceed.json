{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(select),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchSelect),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(enroll),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchEnroll),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { all, delay, fork, put, takeEvery } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { SELECT_STADIUM_FAILURE, SELECT_STADIUM_REQUEST, SELECT_STADIUM_SUCCESS, ENROLL_STADIUM_FAILURE, ENROLL_STADIUM_REQUEST, ENROLL_STADIUM_SUCCESS } from '../reducers/stadium';\n\nfunction selectAPI() {\n  // 서버에 요청을 보내는 부분\n  return axios.post('/stadium');\n}\n\nfunction select() {\n  return _regeneratorRuntime.wrap(function select$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(2000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            // put은 dispatch 동일\n            type: SELECT_STADIUM_SUCCESS\n          });\n\n        case 5:\n          _context.next = 12;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 12;\n          return put({\n            type: SELECT_STADIUM_FAILURE,\n            error: _context.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction watchSelect() {\n  return _regeneratorRuntime.wrap(function watchSelect$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(SELECT_STADIUM_REQUEST, select);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction enrollAPI() {\n  // 서버에 요청을 보내는 부분\n  return axios.post('/stadium/register');\n}\n\nfunction enroll() {\n  return _regeneratorRuntime.wrap(function enroll$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return delay(2000);\n\n        case 3:\n          throw new Error('에러에러에러');\n\n        case 6:\n          _context3.next = 13;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          // loginAPI 실패\n          console.error(_context3.t0);\n          _context3.next = 13;\n          return put({\n            type: ENROLL_STADIUM_FAILURE,\n            error: _context3.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction watchEnroll() {\n  return _regeneratorRuntime.wrap(function watchEnroll$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(ENROLL_STADIUM_REQUEST, enroll);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchSelect), fork(watchEnroll)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["/Users/kcho/Desktop/react-futchall/front/sagas/stadium.js"],"names":["select","watchSelect","enroll","watchEnroll","userSaga","all","delay","fork","put","takeEvery","axios","SELECT_STADIUM_FAILURE","SELECT_STADIUM_REQUEST","SELECT_STADIUM_SUCCESS","ENROLL_STADIUM_FAILURE","ENROLL_STADIUM_REQUEST","ENROLL_STADIUM_SUCCESS","selectAPI","post","type","console","error","enrollAPI","Error"],"mappings":";;oDAgBUA,M;qDAgBAC,W;qDASAC,M;qDAiBAC,W;qDAIeC,Q;;AA9DzB,SAASC,GAAT,EAAcC,KAAd,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,SAAhC,QAAiD,oBAAjD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACIC,sBADJ,EAEIC,sBAFJ,EAGIC,sBAHJ,EAIIC,sBAJJ,EAKIC,sBALJ,EAMIC,sBANJ,QAOO,qBAPP;;AASA,SAASC,SAAT,GAAqB;AACnB;AACE,SAAOP,KAAK,CAACQ,IAAN,CAAW,UAAX,CAAP;AACH;;AAED,SAAUlB,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGQ,iBAAMM,KAAK,CAAC,IAAD,CAAX;;AAHR;AAAA;AAIQ,iBAAME,GAAG,CAAC;AAAE;AACRW,YAAAA,IAAI,EAAEN;AADA,WAAD,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQQO,UAAAA,OAAO,CAACC,KAAR;AARR;AASQ,iBAAMb,GAAG,CAAC;AACNW,YAAAA,IAAI,EAAER,sBADA;AAENU,YAAAA,KAAK;AAFC,WAAD,CAAT;;AATR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAAUpB,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMQ,SAAS,CAACG,sBAAD,EAAyBZ,MAAzB,CAAf;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAASsB,SAAT,GAAqB;AACnB;AACE,SAAOZ,KAAK,CAACQ,IAAN,CAAW,mBAAX,CAAP;AACH;;AAED,SAAUhB,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGQ,iBAAMI,KAAK,CAAC,IAAD,CAAX;;AAHR;AAAA,gBAIc,IAAIiB,KAAJ,CAAU,QAAV,CAJd;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQkB;AACVH,UAAAA,OAAO,CAACC,KAAR;AATR;AAUQ,iBAAMb,GAAG,CAAC;AACNW,YAAAA,IAAI,EAAEL,sBADA;AAENO,YAAAA,KAAK;AAFC,WAAD,CAAT;;AAVR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,SAAUlB,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMM,SAAS,CAACM,sBAAD,EAAyBb,MAAzB,CAAf;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACNE,IAAI,CAACN,WAAD,CADE,EAENM,IAAI,CAACJ,WAAD,CAFE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, delay, fork, put, takeEvery } from 'redux-saga/effects';\nimport axios from 'axios';\nimport {\n    SELECT_STADIUM_FAILURE,\n    SELECT_STADIUM_REQUEST,\n    SELECT_STADIUM_SUCCESS,\n    ENROLL_STADIUM_FAILURE,\n    ENROLL_STADIUM_REQUEST,\n    ENROLL_STADIUM_SUCCESS,\n} from '../reducers/stadium';\n\nfunction selectAPI() {\n  // 서버에 요청을 보내는 부분\n    return axios.post('/stadium');\n}\n\nfunction* select() {\n    try {\n        // yield call(selectAPI);\n        yield delay(2000);\n        yield put({ // put은 dispatch 동일\n            type: SELECT_STADIUM_SUCCESS,\n        });\n    } catch (e) {\n        console.error(e);\n        yield put({\n            type: SELECT_STADIUM_FAILURE,\n            error:e,\n        });\n    }\n}\n\nfunction* watchSelect() {\n    yield takeEvery(SELECT_STADIUM_REQUEST, select);\n}\n\nfunction enrollAPI() {\n  // 서버에 요청을 보내는 부분\n    return axios.post('/stadium/register');\n}\n\nfunction* enroll() {\n    try {\n        // yield call(enrollAPI);\n        yield delay(2000);\n        throw new Error('에러에러에러');\n        yield put({ // put은 dispatch 동일\n            type: ENROLL_STADIUM_SUCCESS,\n        });\n    } catch (e) { // loginAPI 실패\n        console.error(e);\n        yield put({\n            type: ENROLL_STADIUM_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction* watchEnroll() {\n    yield takeEvery(ENROLL_STADIUM_REQUEST, enroll);\n}\n\nexport default function* userSaga() {\n    yield all([\n        fork(watchSelect),\n        fork(watchEnroll),\n    ]);\n}\n"]},"metadata":{},"sourceType":"module"}