{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/kcho/Desktop/react-futchall/front/components/Maps.js\";\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { message } from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\n\nvar Maps = function Maps() {\n  useEffect(function () {\n    // 지도 위치에 따른 데이터 가져와야 해 redux-saga\n    var lat = '37.5795876';\n    var lng = '126.9636324';\n    var container = document.getElementById(\"mapContainer\");\n    var options;\n    var map;\n\n    function fetchItems() {\n      return new Promise(function (resolve, reject) {\n        var items = [1, 2, 3];\n        resolve(items);\n      });\n    }\n\n    function logItems() {\n      var resultItems;\n      return _regeneratorRuntime.async(function logItems$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(fetchItems());\n\n            case 2:\n              resultItems = _context.sent;\n              console.log(resultItems); // [1,2,3]\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n\n    (function _callee() {\n      var result;\n      return _regeneratorRuntime.async(function _callee$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(function () {\n                return new Promise(function (resolve, reject) {\n                  if (navigator.geolocation) {\n                    navigator.geolocation.getCurrentPosition(function (pos) {\n                      lat = pos.coords.latitude;\n                      lng = pos.coords.longitude;\n                      resolve(\"success\", \"현재 접속위치를 중심으로 지도를 활성화하였습니다.\");\n                    }, function () {\n                      reject(\"warn\", \"위치정보제공을 동의하시고 현재위치 주변 구장을 확인하세요.\");\n                    });\n                  } else {\n                    reject(\"error\", \"현재 브라우저에서는 현재위치 사용이 불가능합니다.\");\n                  }\n                });\n              });\n\n            case 3:\n              result = _context2.sent;\n              message.success(result[1]);\n              _context2.next = 10;\n              break;\n\n            case 7:\n              _context2.prev = 7;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.log(_context2.t0);\n\n            case 10:\n              options = {\n                center: new kakao.maps.LatLng(lat, lng),\n                level: 5\n              };\n              map = new kakao.maps.Map(container, options);\n\n            case 12:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, [[0, 7]], Promise);\n    }); // if (navigator.geolocation) {\n    //     navigator.geolocation.getCurrentPosition(function (pos) {\n    //         lat = pos.coords.latitude;     // 위도\n    //         lng = pos.coords.longitude; // 경도\n    //         options = {\n    //             center: new kakao.maps.LatLng(lat, lng),\n    //             level: 5\n    //         };\n    //         map = new kakao.maps.Map(container, options);\n    //         message.success(\"현재 접속위치를 중심으로 지도를 활성화하였습니다.\");\n    //         // const mapTypeControl = new kakao.maps.MapTypeControl();\n    //         // map.addControl(mapTypeControl, kakao.maps.ControlPosition.TOPRIGHT);\n    //     }, function () {\n    //         options = {\n    //             center: new kakao.maps.LatLng(lat, lng),\n    //             level: 5\n    //         };\n    //         map = new kakao.maps.Map(container, options);\n    //         message.warn(\"위치정보제공을 동의하시고 현재위치 주변 구장을 확인하세요.\");\n    //     });\n    // } else {\n    //     options = {\n    //         center: new kakao.maps.LatLng(lat, lng),\n    //         level: 5\n    //     };\n    //     map = new kakao.maps.Map(container, options);\n    //     message.error(\"현재 브라우저에서는 현재위치 사용이 불가능합니다.\");\n    // }\n    // // 마커 클러스터러를 생성합니다 \n    // var clusterer = new kakao.maps.MarkerClusterer({\n    //     map: map, // 마커들을 클러스터로 관리하고 표시할 지도 객체 \n    //     averageCenter: true, // 클러스터에 포함된 마커들의 평균 위치를 클러스터 마커 위치로 설정 \n    //     minLevel: 10 // 클러스터 할 최소 지도 레벨 \n    // });\n    // // 데이터를 가져오기 위해 jQuery를 사용합니다\n    // // 데이터를 가져와 마커를 생성하고 클러스터러 객체에 넘겨줍니다\n    // $.get(\"/download/web/data/chicken.json\", function (data) {\n    //     // 데이터에서 좌표 값을 가지고 마커를 표시합니다\n    //     // 마커 클러스터러로 관리할 마커 객체는 생성할 때 지도 객체를 설정하지 않습니다\n    //     var markers = $(data.positions).map(function (i, position) {\n    //         return new kakao.maps.Marker({\n    //             position: new kakao.maps.LatLng(position.lat, position.lng)\n    //         });\n    //     });\n    //     // 클러스터러에 마커들을 추가합니다\n    //     clusterer.addMarkers(markers);\n    // });\n\n  });\n  return __jsx(\"div\", {\n    id: \"mapContainer\",\n    style: {\n      height: '70vh',\n      textAlign: 'center'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }, __jsx(LoadingOutlined, {\n    style: {\n      margin: '0 auto',\n      width: '10vh',\n      height: '10vh'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default Maps;","map":{"version":3,"sources":["/Users/kcho/Desktop/react-futchall/front/components/Maps.js"],"names":["React","useState","useEffect","message","LoadingOutlined","Maps","lat","lng","container","document","getElementById","options","map","fetchItems","Promise","resolve","reject","items","logItems","resultItems","console","log","navigator","geolocation","getCurrentPosition","pos","coords","latitude","longitude","result","success","center","kakao","maps","LatLng","level","Map","height","textAlign","margin","width"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { message } from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\n\nconst Maps = () => {\n\n    useEffect(\n        () => {\n            // 지도 위치에 따른 데이터 가져와야 해 redux-saga\n            let lat = '37.5795876';\n            let lng = '126.9636324';\n            const container = document.getElementById(\"mapContainer\");\n            let options;\n            let map;\n\n            function fetchItems() {\n                return new Promise(function (resolve, reject) {\n                    var items = [1, 2, 3];\n                    resolve(items)\n                });\n            }\n\n            async function logItems() {\n                var resultItems = await fetchItems();\n                console.log(resultItems); // [1,2,3]\n            }\n\n            async () => {\n                try {\n                    const result = await (() => {\n                        return new Promise((resolve, reject) => {\n                            if (navigator.geolocation) {\n                                navigator.geolocation.getCurrentPosition(function (pos) {\n                                    lat = pos.coords.latitude;\n                                    lng = pos.coords.longitude;\n                                    resolve(\"success\", \"현재 접속위치를 중심으로 지도를 활성화하였습니다.\");\n                                }, function () {\n                                    reject(\"warn\", \"위치정보제공을 동의하시고 현재위치 주변 구장을 확인하세요.\");\n                                });\n                            } else {\n                                reject(\"error\", \"현재 브라우저에서는 현재위치 사용이 불가능합니다.\");\n                            }\n                        });\n                    });\n                    message.success(result[1]);\n                } catch (error) {\n                    console.log(error);\n                }\n                options = {\n                    center: new kakao.maps.LatLng(lat, lng),\n                    level: 5\n                };\n                map = new kakao.maps.Map(container, options);\n            }\n            // if (navigator.geolocation) {\n            //     navigator.geolocation.getCurrentPosition(function (pos) {\n            //         lat = pos.coords.latitude;     // 위도\n            //         lng = pos.coords.longitude; // 경도\n            //         options = {\n            //             center: new kakao.maps.LatLng(lat, lng),\n            //             level: 5\n            //         };\n            //         map = new kakao.maps.Map(container, options);\n            //         message.success(\"현재 접속위치를 중심으로 지도를 활성화하였습니다.\");\n            //         // const mapTypeControl = new kakao.maps.MapTypeControl();\n            //         // map.addControl(mapTypeControl, kakao.maps.ControlPosition.TOPRIGHT);\n            //     }, function () {\n            //         options = {\n            //             center: new kakao.maps.LatLng(lat, lng),\n            //             level: 5\n            //         };\n            //         map = new kakao.maps.Map(container, options);\n            //         message.warn(\"위치정보제공을 동의하시고 현재위치 주변 구장을 확인하세요.\");\n            //     });\n            // } else {\n            //     options = {\n            //         center: new kakao.maps.LatLng(lat, lng),\n            //         level: 5\n            //     };\n            //     map = new kakao.maps.Map(container, options);\n            //     message.error(\"현재 브라우저에서는 현재위치 사용이 불가능합니다.\");\n            // }\n\n            // // 마커 클러스터러를 생성합니다 \n            // var clusterer = new kakao.maps.MarkerClusterer({\n            //     map: map, // 마커들을 클러스터로 관리하고 표시할 지도 객체 \n            //     averageCenter: true, // 클러스터에 포함된 마커들의 평균 위치를 클러스터 마커 위치로 설정 \n            //     minLevel: 10 // 클러스터 할 최소 지도 레벨 \n            // });\n\n            // // 데이터를 가져오기 위해 jQuery를 사용합니다\n            // // 데이터를 가져와 마커를 생성하고 클러스터러 객체에 넘겨줍니다\n            // $.get(\"/download/web/data/chicken.json\", function (data) {\n            //     // 데이터에서 좌표 값을 가지고 마커를 표시합니다\n            //     // 마커 클러스터러로 관리할 마커 객체는 생성할 때 지도 객체를 설정하지 않습니다\n            //     var markers = $(data.positions).map(function (i, position) {\n            //         return new kakao.maps.Marker({\n            //             position: new kakao.maps.LatLng(position.lat, position.lng)\n            //         });\n            //     });\n\n            //     // 클러스터러에 마커들을 추가합니다\n            //     clusterer.addMarkers(markers);\n            // });\n        }\n    );\n    return (\n        <div id=\"mapContainer\" style={{ height: '70vh', textAlign: 'center' }}>\n            <LoadingOutlined style={{ margin: '0 auto', width: '10vh', height: '10vh' }} />\n        </div>\n    );\n};\n\nexport default Maps;"]},"metadata":{},"sourceType":"module"}