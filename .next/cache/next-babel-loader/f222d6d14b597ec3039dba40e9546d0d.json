{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/kcho/Desktop/react-futchall/front/components/Maps.js\";\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { message } from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\n\nvar Maps = function Maps() {\n  useEffect(function _callee() {\n    var lat, lng, container, options, map, result;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // 지도 위치에 따른 데이터 가져와야 해 redux-saga\n            lat = '37.5795876';\n            lng = '126.9636324';\n            container = document.getElementById(\"mapContainer\");\n            _context.prev = 3;\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(function () {\n              return new Promise(function (resolve, reject) {\n                if (navigator.geolocation) {\n                  navigator.geolocation.getCurrentPosition(function (pos) {\n                    lat = pos.coords.latitude;\n                    lng = pos.coords.longitude; // console.log(\"1\");\n\n                    resolve([\"success\", \"현재 접속위치를 중심으로 지도를 활성화하였습니다.\"]);\n                  }, function () {\n                    // console.log(\"2\");\n                    reject([\"warn\", \"위치정보제공을 동의하시고 현재위치 주변 구장을 확인하세요.\"]);\n                  });\n                } else {\n                  // console.log(\"3\");\n                  reject([\"error\", \"현재 브라우저에서는 현재위치 사용이 불가능합니다.\"]);\n                }\n              });\n            });\n\n          case 6:\n            result = _context.sent;\n            console.log(result); // message.success(result[1]);\n\n            _context.next = 13;\n            break;\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](3);\n            console.log(_context.t0);\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[3, 10]], Promise);\n  });\n  return __jsx(\"div\", {\n    id: \"mapContainer\",\n    style: {\n      height: '70vh',\n      textAlign: 'center'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }, __jsx(LoadingOutlined, {\n    style: {\n      margin: '0 auto',\n      width: '10vh',\n      height: '10vh'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default Maps;","map":{"version":3,"sources":["/Users/kcho/Desktop/react-futchall/front/components/Maps.js"],"names":["React","useState","useEffect","message","LoadingOutlined","Maps","lat","lng","container","document","getElementById","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","pos","coords","latitude","longitude","result","console","log","height","textAlign","margin","width"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,MAAxB;AACA,SAASC,eAAT,QAAgC,mBAAhC;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AAEfH,EAAAA,SAAS,CACL;AAAA;AAAA;AAAA;AAAA;AAAA;AACI;AACII,YAAAA,GAFR,GAEc,YAFd;AAGQC,YAAAA,GAHR,GAGc,aAHd;AAIUC,YAAAA,SAJV,GAIsBC,QAAQ,CAACC,cAAT,CAAwB,cAAxB,CAJtB;AAAA;AAAA;AAAA,6CAsB8B,YAAM;AACxB,qBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,oBAAIC,SAAS,CAACC,WAAd,EAA2B;AACvBD,kBAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyC,UAAUC,GAAV,EAAe;AACpDX,oBAAAA,GAAG,GAAGW,GAAG,CAACC,MAAJ,CAAWC,QAAjB;AACAZ,oBAAAA,GAAG,GAAGU,GAAG,CAACC,MAAJ,CAAWE,SAAjB,CAFoD,CAGpD;;AACAR,oBAAAA,OAAO,CAAC,CAAC,SAAD,EAAY,6BAAZ,CAAD,CAAP;AACH,mBALD,EAKG,YAAY;AACX;AACAC,oBAAAA,MAAM,CAAC,CAAC,MAAD,EAAS,kCAAT,CAAD,CAAN;AACH,mBARD;AASH,iBAVD,MAUO;AACH;AACAA,kBAAAA,MAAM,CAAC,CAAC,OAAD,EAAU,6BAAV,CAAD,CAAN;AACH;AACJ,eAfM,CAAP;AAgBH,aAvCT;;AAAA;AAsBcQ,YAAAA,MAtBd;AAwCQC,YAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ,EAxCR,CAyCQ;;AAzCR;AAAA;;AAAA;AAAA;AAAA;AA2CQC,YAAAA,OAAO,CAACC,GAAR;;AA3CR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GADK,CAAT;AAmGA,SACI;AAAK,IAAA,EAAE,EAAC,cAAR;AAAuB,IAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAE,MAAV;AAAkBC,MAAAA,SAAS,EAAE;AAA7B,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,eAAD;AAAiB,IAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAE,QAAV;AAAoBC,MAAAA,KAAK,EAAE,MAA3B;AAAmCH,MAAAA,MAAM,EAAE;AAA3C,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAKH,CA1GD;;AA4GA,eAAenB,IAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { message } from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\n\nconst Maps = () => {\n\n    useEffect(\n        async () => {\n            // 지도 위치에 따른 데이터 가져와야 해 redux-saga\n            let lat = '37.5795876';\n            let lng = '126.9636324';\n            const container = document.getElementById(\"mapContainer\");\n            let options;\n            let map;\n\n            // function fetchItems() {\n            //     return new Promise(function (resolve, reject) {\n            //         var items = [1, 2, 3];\n            //         resolve(items)\n            //     });\n            // }\n\n            // async function logItems() {\n            //     var resultItems = await fetchItems();\n            //     console.log(resultItems); // [1,2,3]\n            // }\n\n\n            try {\n                const result = await (() => {\n                    return new Promise((resolve, reject) => {\n                        if (navigator.geolocation) {\n                            navigator.geolocation.getCurrentPosition(function (pos) {\n                                lat = pos.coords.latitude;\n                                lng = pos.coords.longitude;\n                                // console.log(\"1\");\n                                resolve([\"success\", \"현재 접속위치를 중심으로 지도를 활성화하였습니다.\"]);\n                            }, function () {\n                                // console.log(\"2\");\n                                reject([\"warn\", \"위치정보제공을 동의하시고 현재위치 주변 구장을 확인하세요.\"]);\n                            });\n                        } else {\n                            // console.log(\"3\");\n                            reject([\"error\", \"현재 브라우저에서는 현재위치 사용이 불가능합니다.\"]);\n                        }\n                    });\n                });\n                console.log(result);\n                // message.success(result[1]);\n            } catch (error) {\n                console.log(error);\n            }\n\n            // if (navigator.geolocation) {\n            //     navigator.geolocation.getCurrentPosition(function (pos) {\n            //         lat = pos.coords.latitude;     // 위도\n            //         lng = pos.coords.longitude; // 경도\n            //         options = {\n            //             center: new kakao.maps.LatLng(lat, lng),\n            //             level: 5\n            //         };\n            //         map = new kakao.maps.Map(container, options);\n            //         message.success(\"현재 접속위치를 중심으로 지도를 활성화하였습니다.\");\n            //         // const mapTypeControl = new kakao.maps.MapTypeControl();\n            //         // map.addControl(mapTypeControl, kakao.maps.ControlPosition.TOPRIGHT);\n            //     }, function () {\n            //         options = {\n            //             center: new kakao.maps.LatLng(lat, lng),\n            //             level: 5\n            //         };\n            //         map = new kakao.maps.Map(container, options);\n            //         message.warn(\"위치정보제공을 동의하시고 현재위치 주변 구장을 확인하세요.\");\n            //     });\n            // } else {\n            //     options = {\n            //         center: new kakao.maps.LatLng(lat, lng),\n            //         level: 5\n            //     };\n            //     map = new kakao.maps.Map(container, options);\n            //     message.error(\"현재 브라우저에서는 현재위치 사용이 불가능합니다.\");\n            // }\n\n            // // 마커 클러스터러를 생성합니다 \n            // var clusterer = new kakao.maps.MarkerClusterer({\n            //     map: map, // 마커들을 클러스터로 관리하고 표시할 지도 객체 \n            //     averageCenter: true, // 클러스터에 포함된 마커들의 평균 위치를 클러스터 마커 위치로 설정 \n            //     minLevel: 10 // 클러스터 할 최소 지도 레벨 \n            // });\n\n            // // 데이터를 가져오기 위해 jQuery를 사용합니다\n            // // 데이터를 가져와 마커를 생성하고 클러스터러 객체에 넘겨줍니다\n            // $.get(\"/download/web/data/chicken.json\", function (data) {\n            //     // 데이터에서 좌표 값을 가지고 마커를 표시합니다\n            //     // 마커 클러스터러로 관리할 마커 객체는 생성할 때 지도 객체를 설정하지 않습니다\n            //     var markers = $(data.positions).map(function (i, position) {\n            //         return new kakao.maps.Marker({\n            //             position: new kakao.maps.LatLng(position.lat, position.lng)\n            //         });\n            //     });\n\n            //     // 클러스터러에 마커들을 추가합니다\n            //     clusterer.addMarkers(markers);\n            // });\n        }\n    );\n    return (\n        <div id=\"mapContainer\" style={{ height: '70vh', textAlign: 'center' }}>\n            <LoadingOutlined style={{ margin: '0 auto', width: '10vh', height: '10vh' }} />\n        </div>\n    );\n};\n\nexport default Maps;"]},"metadata":{},"sourceType":"module"}