{"ast":null,"code":"var _jsxFileName = \"/Users/kcho/Desktop/react-futchall/front/components/Maps.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport { message } from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\nimport { getLocation } from '../util/getLocation';\nimport { useSetter } from '../util/useSetter';\n\nconst Maps = () => {\n  const [lat, setLat] = useSetter('37.5795876');\n  const [lng, setLng] = useSetter('126.9636324');\n  let container;\n  let options;\n  let map;\n  useEffect(() => {\n    //최초 마운트 시\n    // 지도 위치에 따른 데이터 가져와야 해 redux-saga\n    (async () => {\n      const arr = await getLocation();\n      console.log(arr);\n\n      if (arr[0] === \"success\") {\n        setLat(arr[2]);\n        setLng(arr[3]);\n        message.success(arr[1]);\n      } else if (arr[0] === \"warn\") {\n        message.warn(arr[1], 4);\n      } else {\n        message.error(arr[1], 4);\n      }\n\n      options = {\n        center: new kakao.maps.LatLng(lat, lng),\n        level: 5\n      };\n      map = new kakao.maps.Map(document.getElementById(\"mapContainer\"), options);\n      map.addControl(new kakao.maps.MapTypeControl(), kakao.maps.ControlPosition.TOPRIGHT);\n      kakao.maps.event.addListener(map, 'dragend', function () {\n        let latlng = map.getCenter();\n        setLat(latlng.getLat());\n        setLng(latlng.getLng());\n        console.log(`현재위치는 ${lat}, ${lng}`);\n      });\n    })(); // // 마커 클러스터러를 생성합니다 \n    // var clusterer = new kakao.maps.MarkerClusterer({\n    //     map: map, // 마커들을 클러스터로 관리하고 표시할 지도 객체 \n    //     averageCenter: true, // 클러스터에 포함된 마커들의 평균 위치를 클러스터 마커 위치로 설정 \n    //     minLevel: 10 // 클러스터 할 최소 지도 레벨 \n    // });\n    // // 데이터를 가져오기 위해 jQuery를 사용합니다\n    // // 데이터를 가져와 마커를 생성하고 클러스터러 객체에 넘겨줍니다\n    // $.get(\"/download/web/data/chicken.json\", function (data) {\n    //     // 데이터에서 좌표 값을 가지고 마커를 표시합니다\n    //     // 마커 클러스터러로 관리할 마커 객체는 생성할 때 지도 객체를 설정하지 않습니다\n    //     var markers = $(data.positions).map(function (i, position) {\n    //         return new kakao.maps.Marker({\n    //             position: new kakao.maps.LatLng(position.lat, position.lng)\n    //         });\n    //     });\n    //     // 클러스터러에 마커들을 추가합니다\n    //     clusterer.addMarkers(markers);\n    // });\n\n  }, []); // useEffect(\n  //     () => {\n  //     }, [lat, lng]\n  // )\n\n  return __jsx(\"div\", {\n    id: \"mapContainer\",\n    style: {\n      height: '70vh',\n      textAlign: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, __jsx(LoadingOutlined, {\n    style: {\n      margin: '0 auto',\n      width: '10vh',\n      height: '10vh'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default Maps;","map":{"version":3,"sources":["/Users/kcho/Desktop/react-futchall/front/components/Maps.js"],"names":["React","useEffect","message","LoadingOutlined","getLocation","useSetter","Maps","lat","setLat","lng","setLng","container","options","map","arr","console","log","success","warn","error","center","kakao","maps","LatLng","level","Map","document","getElementById","addControl","MapTypeControl","ControlPosition","TOPRIGHT","event","addListener","latlng","getCenter","getLat","getLng","height","textAlign","margin","width"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { message } from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\nimport { getLocation } from '../util/getLocation';\nimport { useSetter } from '../util/useSetter';\nconst Maps = () => {\n    const [lat, setLat] = useSetter('37.5795876');\n    const [lng, setLng] = useSetter('126.9636324');\n    let container;\n    let options;\n    let map;\n    useEffect(\n        () => {\n            //최초 마운트 시\n            // 지도 위치에 따른 데이터 가져와야 해 redux-saga\n            (async () => {\n                const arr = await getLocation();\n                console.log(arr);\n                if (arr[0] === \"success\") {\n                    setLat(arr[2]);\n                    setLng(arr[3]);\n                    message.success(arr[1]);\n                } else if (arr[0] === \"warn\") {\n                    message.warn(arr[1], 4);\n                } else {\n                    message.error(arr[1], 4);\n                }\n                options = {\n                    center: new kakao.maps.LatLng(lat, lng),\n                    level: 5\n                };\n                map = new kakao.maps.Map(document.getElementById(\"mapContainer\"), options);\n                map.addControl(new kakao.maps.MapTypeControl(), kakao.maps.ControlPosition.TOPRIGHT);\n                kakao.maps.event.addListener(map, 'dragend', function () {\n                    let latlng = map.getCenter();\n                    setLat(latlng.getLat());\n                    setLng(latlng.getLng());\n                    console.log(`현재위치는 ${lat}, ${lng}`);\n                });\n            })();\n            // // 마커 클러스터러를 생성합니다 \n            // var clusterer = new kakao.maps.MarkerClusterer({\n            //     map: map, // 마커들을 클러스터로 관리하고 표시할 지도 객체 \n            //     averageCenter: true, // 클러스터에 포함된 마커들의 평균 위치를 클러스터 마커 위치로 설정 \n            //     minLevel: 10 // 클러스터 할 최소 지도 레벨 \n            // });\n\n            // // 데이터를 가져오기 위해 jQuery를 사용합니다\n            // // 데이터를 가져와 마커를 생성하고 클러스터러 객체에 넘겨줍니다\n            // $.get(\"/download/web/data/chicken.json\", function (data) {\n            //     // 데이터에서 좌표 값을 가지고 마커를 표시합니다\n            //     // 마커 클러스터러로 관리할 마커 객체는 생성할 때 지도 객체를 설정하지 않습니다\n            //     var markers = $(data.positions).map(function (i, position) {\n            //         return new kakao.maps.Marker({\n            //             position: new kakao.maps.LatLng(position.lat, position.lng)\n            //         });\n            //     });\n\n            //     // 클러스터러에 마커들을 추가합니다\n            //     clusterer.addMarkers(markers);\n            // });\n        }, []\n    );\n    // useEffect(\n    //     () => {\n\n    //     }, [lat, lng]\n    // )\n    return (\n        <div id=\"mapContainer\" style={{ height: '70vh', textAlign: 'center' }}>\n            <LoadingOutlined style={{ margin: '0 auto', width: '10vh', height: '10vh' }} />\n        </div>\n    );\n};\n\nexport default Maps;"]},"metadata":{},"sourceType":"module"}