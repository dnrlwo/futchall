{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(select),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchSelect),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(enroll),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchEnroll),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(add),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { all, delay, fork, put, takeEvery } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { SELECT_STADIUM_FAILURE, SELECT_STADIUM_REQUEST, SELECT_STADIUM_SUCCESS, ENROLL_STADIUM_FAILURE, ENROLL_STADIUM_REQUEST, ENROLL_STADIUM_SUCCESS, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE } from '../reducers/stadium';\nvar dummyComment = [{\n  datetime: \"2020-04-26\",\n  content: \"깔끔하고 너무 좋습니다\",\n  avatar: \"\",\n  author: \"우기재\",\n  rating: 5\n}, {\n  datetime: \"2020-04-25\",\n  content: \"꽤괜;\",\n  avatar: \"\",\n  author: \"뚜요니\",\n  rating: 4\n}, {\n  datetime: \"2020-04-25\",\n  content: \"약간 좁은 듯한 느낌\",\n  avatar: \"\",\n  author: \"우기재\",\n  rating: 3\n}, {\n  datetime: \"2020-04-24\",\n  content: \"깔끔하고 너무 좋습니다\",\n  avatar: \"\",\n  author: \"우기재\",\n  rating: 4\n}, {\n  datetime: \"2020-04-23\",\n  content: \"정류장에서 조금 걸어야 합니다\",\n  avatar: \"\",\n  author: \"뚜요니\",\n  rating: 5\n}];\n\nfunction selectAPI() {\n  // 서버에 요청을 보내는 부분\n  return axios.post('/stadium');\n}\n\nfunction select() {\n  return _regeneratorRuntime.wrap(function select$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(2000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            // put은 dispatch 동일\n            type: SELECT_STADIUM_SUCCESS,\n            data: dummyComment\n          });\n\n        case 5:\n          _context.next = 12;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 12;\n          return put({\n            type: SELECT_STADIUM_FAILURE,\n            error: _context.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction watchSelect() {\n  return _regeneratorRuntime.wrap(function watchSelect$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(SELECT_STADIUM_REQUEST, select);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction enrollAPI() {\n  // 서버에 요청을 보내는 부분\n  return axios.post('/stadium/register');\n}\n\nfunction enroll() {\n  return _regeneratorRuntime.wrap(function enroll$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return delay(2000);\n\n        case 3:\n          throw new Error('에러에러에러');\n\n        case 6:\n          _context3.next = 13;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          // loginAPI 실패\n          console.error(_context3.t0);\n          _context3.next = 13;\n          return put({\n            type: ENROLL_STADIUM_FAILURE,\n            error: _context3.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction watchEnroll() {\n  return _regeneratorRuntime.wrap(function watchEnroll$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(ENROLL_STADIUM_REQUEST, enroll);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n} ///////////////////////////////////////////////////////\n\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/stadium/\", data);\n}\n\nfunction add(action) {\n  return _regeneratorRuntime.wrap(function add$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context5.next = 5;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: [action.data].concat(dummyComment)\n          });\n\n        case 5:\n          _context5.next = 11;\n          break;\n\n        case 7:\n          _context5.prev = 7;\n          _context5.t0 = _context5[\"catch\"](0);\n          _context5.next = 11;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context5.t0\n          });\n\n        case 11:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 7]]);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeEvery(ADD_COMMENT_REQUEST, add);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([fork(watchSelect), fork(watchEnroll), fork(watchAddComment)]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}","map":{"version":3,"sources":["/Users/kcho/Desktop/react-futchall/front/sagas/stadium.js"],"names":["select","watchSelect","enroll","watchEnroll","add","watchAddComment","userSaga","all","delay","fork","put","takeEvery","axios","SELECT_STADIUM_FAILURE","SELECT_STADIUM_REQUEST","SELECT_STADIUM_SUCCESS","ENROLL_STADIUM_FAILURE","ENROLL_STADIUM_REQUEST","ENROLL_STADIUM_SUCCESS","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","dummyComment","datetime","content","avatar","author","rating","selectAPI","post","type","data","console","error","enrollAPI","Error","addCommentAPI","action"],"mappings":"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","sourcesContent":["import { all, delay, fork, put, takeEvery } from 'redux-saga/effects';\nimport axios from 'axios';\nimport {\n    SELECT_STADIUM_FAILURE,\n    SELECT_STADIUM_REQUEST,\n    SELECT_STADIUM_SUCCESS,\n    ENROLL_STADIUM_FAILURE,\n    ENROLL_STADIUM_REQUEST,\n    ENROLL_STADIUM_SUCCESS,\n    ADD_COMMENT_REQUEST,\n    ADD_COMMENT_SUCCESS,\n    ADD_COMMENT_FAILURE,\n} from '../reducers/stadium';\n\nconst dummyComment=[\n    {\n        datetime:\"2020-04-26\",\n        content:\"깔끔하고 너무 좋습니다\",\n        avatar:\"\",\n        author:\"우기재\",\n        rating:5,\n    },\n    {\n        datetime:\"2020-04-25\",\n        content:\"꽤괜;\",\n        avatar:\"\",\n        author:\"뚜요니\",\n        rating:4,\n    },\n    {\n        datetime:\"2020-04-25\",\n        content:\"약간 좁은 듯한 느낌\",\n        avatar:\"\",\n        author:\"우기재\",\n        rating:3,\n    },\n    {\n        datetime:\"2020-04-24\",\n        content:\"깔끔하고 너무 좋습니다\",\n        avatar:\"\",\n        author:\"우기재\",\n        rating:4,\n    },\n    {\n        datetime:\"2020-04-23\",\n        content:\"정류장에서 조금 걸어야 합니다\",\n        avatar:\"\",\n        author:\"뚜요니\",\n        rating:5,\n    },\n]\nfunction selectAPI() {\n  // 서버에 요청을 보내는 부분\n    return axios.post('/stadium');\n}\n\nfunction* select() {\n    try {\n        // yield call(selectAPI);\n        yield delay(2000);\n        yield put({ // put은 dispatch 동일\n            type: SELECT_STADIUM_SUCCESS,\n            data: dummyComment,\n        });\n    } catch (e) {\n        console.error(e);\n        yield put({\n            type: SELECT_STADIUM_FAILURE,\n            error:e,\n        });\n    }\n}\n\nfunction* watchSelect() {\n    yield takeEvery(SELECT_STADIUM_REQUEST, select);\n}\n\nfunction enrollAPI() {\n  // 서버에 요청을 보내는 부분\n    return axios.post('/stadium/register');\n}\n\nfunction* enroll() {\n    try {\n        // yield call(enrollAPI);\n        yield delay(2000);\n        throw new Error('에러에러에러');\n        yield put({ // put은 dispatch 동일\n            type: ENROLL_STADIUM_SUCCESS,\n        });\n    } catch (e) { // loginAPI 실패\n        console.error(e);\n        yield put({\n            type: ENROLL_STADIUM_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction* watchEnroll() {\n    yield takeEvery(ENROLL_STADIUM_REQUEST, enroll);\n}\n///////////////////////////////////////////////////////\nfunction addCommentAPI(data){\n    return axios.post(`/stadium/`, data);\n}\n\nfunction* add(action){\n    try{\n        // yield call(addCommentAPI, action.data);\n        yield delay(1000);\n        yield put({\n            type:ADD_COMMENT_SUCCESS,\n            data:[action.data, ...dummyComment]\n        });\n    }catch(e){\n        yield put({\n            type:ADD_COMMENT_FAILURE,\n            error:e,\n        })\n    }\n}\nfunction* watchAddComment(){\n    yield takeEvery(ADD_COMMENT_REQUEST, add);\n}\nexport default function* userSaga() {\n    yield all([\n        fork(watchSelect),\n        fork(watchEnroll),\n        fork(watchAddComment),\n    ]);\n}\n"]},"metadata":{},"sourceType":"module"}