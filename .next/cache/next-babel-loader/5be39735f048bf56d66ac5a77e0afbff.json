{"ast":null,"code":"var _jsxFileName = \"/Users/kcho/Desktop/react-futchall/front/components/Maps.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport { withRouter } from 'next/router';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { changeLocationAction } from '../reducers/location';\nimport { makeMarker } from '../util/makeMarker';\nimport { notification, message, Card } from 'antd';\nimport { LoadingOutlined, CloseOutlined } from '@ant-design/icons';\n\nconst Maps = props => {\n  const {\n    latitude,\n    longitude,\n    stadiumList\n  } = useSelector(state => state.location);\n  const dispatch = useDispatch();\n  let options;\n  let map;\n  useEffect(() => {\n    //최초 마운트 시\n    // 지도 위치에 따른 데이터 가져와야 해 redux-saga\n    options = {\n      center: new kakao.maps.LatLng(latitude, longitude),\n      level: 8\n    };\n    map = new kakao.maps.Map(document.getElementById(\"mapContainer\"), options);\n    map.addControl(new kakao.maps.MapTypeControl(), kakao.maps.ControlPosition.TOPRIGHT);\n    stadiumList.map(c => {\n      const marker = new kakao.maps.Marker({\n        map: map,\n        position: new kakao.maps.LatLng(c.latitude, c.longitude)\n      }); // let content = <Card style={{ width: '280px' }} actions={[<CloseOutlined key=\"close\" />]}><Card.Meta title={c.title} /></Card>;\n      // let overlay = new kakao.maps.CustomOverlay({\n      //     content: content,\n      //     map: null,\n      //     position: marker.getPosition()\n      // });\n      // (function (marker, overlay) {\n      //     kakao.maps.event.addListener(marker, 'click', function () {\n      //         overlay.setMap(map);\n      //     });\n      //     function closeOverlay() {\n      //         overlay.setMap(null);\n      //     }\n      // })(marker, overlay);\n    });\n    kakao.maps.event.addListener(map, 'dragend', function () {\n      let latlng = map.getCenter();\n      dispatch(changeLocationAction({\n        latitude: latlng.getLat(),\n        longitude: latlng.getLng()\n      }));\n    });\n\n    if (props.router.query.arr) {\n      const arr = props.router.query.arr.split(\",\");\n\n      if (arr[0] === \"success\") {\n        message.success(arr[1]);\n      } else if (arr[0] === \"warn\") {\n        notification.destroy();\n        notification.open({\n          message: \"현재위치로 탐색하시려면?\",\n          description: \"이전에 위치정보 제공을 동의하시지 않은 경우, 주소창 앞 자물쇠 버튼을 클릭하여 수정하여 주세요.(Internet Explorer에서는 사용하실 수 없습니다.)\",\n          duration: 0\n        });\n      } else {\n        message.error(arr[1], 4);\n      }\n    }\n  }, []);\n  return __jsx(\"div\", {\n    id: \"mapContainer\",\n    style: {\n      height: '70vh',\n      textAlign: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, __jsx(LoadingOutlined, {\n    style: {\n      margin: '0 auto',\n      width: '10vh',\n      height: '10vh'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default withRouter(Maps);","map":{"version":3,"sources":["/Users/kcho/Desktop/react-futchall/front/components/Maps.js"],"names":["React","useEffect","withRouter","useSelector","useDispatch","changeLocationAction","makeMarker","notification","message","Card","LoadingOutlined","CloseOutlined","Maps","props","latitude","longitude","stadiumList","state","location","dispatch","options","map","center","kakao","maps","LatLng","level","Map","document","getElementById","addControl","MapTypeControl","ControlPosition","TOPRIGHT","c","marker","Marker","position","event","addListener","latlng","getCenter","getLat","getLng","router","query","arr","split","success","destroy","open","description","duration","error","height","textAlign","margin","width"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { withRouter } from 'next/router';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { changeLocationAction } from '../reducers/location';\nimport { makeMarker } from '../util/makeMarker';\nimport { notification, message, Card } from 'antd';\nimport { LoadingOutlined, CloseOutlined } from '@ant-design/icons';\nconst Maps = (props) => {\n    const { latitude, longitude, stadiumList } = useSelector(state => state.location);\n    const dispatch = useDispatch();\n    let options;\n    let map;\n    useEffect(\n        () => {\n            //최초 마운트 시\n            // 지도 위치에 따른 데이터 가져와야 해 redux-saga\n            options = {\n                center: new kakao.maps.LatLng(latitude, longitude),\n                level: 8\n            };\n            map = new kakao.maps.Map(document.getElementById(\"mapContainer\"), options);\n            map.addControl(new kakao.maps.MapTypeControl(), kakao.maps.ControlPosition.TOPRIGHT);\n\n            stadiumList.map((c) => {\n                const marker = new kakao.maps.Marker(\n                    {\n                        map: map,\n                        position: new kakao.maps.LatLng(c.latitude, c.longitude)\n                    }\n                )\n                // let content = <Card style={{ width: '280px' }} actions={[<CloseOutlined key=\"close\" />]}><Card.Meta title={c.title} /></Card>;\n                // let overlay = new kakao.maps.CustomOverlay({\n                //     content: content,\n                //     map: null,\n                //     position: marker.getPosition()\n                // });\n                // (function (marker, overlay) {\n                //     kakao.maps.event.addListener(marker, 'click', function () {\n                //         overlay.setMap(map);\n                //     });\n                //     function closeOverlay() {\n                //         overlay.setMap(null);\n                //     }\n                // })(marker, overlay);\n            })\n            kakao.maps.event.addListener(map, 'dragend', function () {\n                let latlng = map.getCenter();\n                dispatch(changeLocationAction({ latitude: latlng.getLat(), longitude: latlng.getLng(), }));\n            });\n            if (props.router.query.arr) {\n                const arr = props.router.query.arr.split(\",\");\n                if (arr[0] === \"success\") {\n                    message.success(arr[1]);\n                } else if (arr[0] === \"warn\") {\n                    notification.destroy();\n                    notification.open({ message: \"현재위치로 탐색하시려면?\", description: \"이전에 위치정보 제공을 동의하시지 않은 경우, 주소창 앞 자물쇠 버튼을 클릭하여 수정하여 주세요.(Internet Explorer에서는 사용하실 수 없습니다.)\", duration: 0 })\n                } else {\n                    message.error(arr[1], 4);\n                }\n            }\n        }, []\n    );\n    return (\n        <div id=\"mapContainer\" style={{ height: '70vh', textAlign: 'center' }}>\n            <LoadingOutlined style={{ margin: '0 auto', width: '10vh', height: '10vh' }} />\n        </div>\n    );\n};\n\nexport default withRouter(Maps);"]},"metadata":{},"sourceType":"module"}