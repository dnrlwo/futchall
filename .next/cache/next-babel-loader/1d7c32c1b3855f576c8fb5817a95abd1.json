{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(select),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchSelect),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(enroll),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchEnroll),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(load),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoad),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(search),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(watchSearch),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { all, delay, fork, put, takeEvery, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { SELECT_TEAM_FAILURE, SELECT_TEAM_REQUEST, SELECT_TEAM_SUCCESS, ENROLL_TEAM_FAILURE, ENROLL_TEAM_REQUEST, ENROLL_TEAM_SUCCESS, LOAD_LIST_REQUEST, LOAD_LIST_SUCCESS, LOAD_LIST_FAILURE, SEARCH_TEAMS_REQUEST, SEARCH_TEAMS_SUCCESS, SEARCH_TEAMS_FAILURE } from '../reducers/team';\n\nfunction selectAPI() {\n  // 서버에 요청을 보내는 부분\n  return axios.post('/team');\n}\n\nfunction select() {\n  return _regeneratorRuntime.wrap(function select$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(2000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            // put은 dispatch 동일\n            type: SELECT_TEAM_SUCCESS\n          });\n\n        case 5:\n          _context.next = 12;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 12;\n          return put({\n            type: SELECT_TEAM_FAILURE,\n            error: _context.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction watchSelect() {\n  return _regeneratorRuntime.wrap(function watchSelect$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(SELECT_TEAM_REQUEST, select);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction enrollAPI() {\n  // 서버에 요청을 보내는 부분\n  return axios.post('/team/register');\n}\n\nfunction enroll() {\n  return _regeneratorRuntime.wrap(function enroll$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return delay(2000);\n\n        case 3:\n          throw new Error('에러에러에러');\n\n        case 6:\n          _context3.next = 13;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          // loginAPI 실패\n          console.error(_context3.t0);\n          _context3.next = 13;\n          return put({\n            type: ENROLL_TEAM_FAILURE,\n            error: _context3.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction watchEnroll() {\n  return _regeneratorRuntime.wrap(function watchEnroll$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(ENROLL_TEAM_REQUEST, enroll);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction loadAPI() {\n  return axios.get('/team/rank');\n}\n\nfunction load() {\n  return _regeneratorRuntime.wrap(function load$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context5.next = 5;\n          return put({\n            type: LOAD_LIST_SUCCESS\n          });\n\n        case 5:\n          _context5.next = 11;\n          break;\n\n        case 7:\n          _context5.prev = 7;\n          _context5.t0 = _context5[\"catch\"](0);\n          _context5.next = 11;\n          return put({\n            type: LOAD_LIST_FAILURE,\n            error: _context5.t0\n          });\n\n        case 11:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 7]]);\n}\n\nfunction watchLoad() {\n  return _regeneratorRuntime.wrap(function watchLoad$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeEvery(LOAD_LIST_REQUEST, load);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction searchAPI(query) {\n  return axios.get(\"team/search?q=\".concat(query));\n}\n\nfunction search(action) {\n  return _regeneratorRuntime.wrap(function search$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return delay(500);\n\n        case 3:\n          _context7.next = 5;\n          return put({\n            type: SEARCH_TEAMS_SUCCESS\n          });\n\n        case 5:\n          _context7.next = 11;\n          break;\n\n        case 7:\n          _context7.prev = 7;\n          _context7.t0 = _context7[\"catch\"](0);\n          _context7.next = 11;\n          return put({\n            type: SEARCH_TEAMS_FAILURE,\n            error: _context7.t0\n          });\n\n        case 11:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 7]]);\n}\n\nfunction watchSearch() {\n  return _regeneratorRuntime.wrap(function watchSearch$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(SEARCH_TEAMS_REQUEST, search);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return all([fork(watchSelect), fork(watchEnroll), fork(watchLoad), fork(watchSearch)]);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}","map":{"version":3,"sources":["/Users/kcho/Desktop/react-futchall/front/sagas/team.js"],"names":["select","watchSelect","enroll","watchEnroll","load","watchLoad","search","watchSearch","userSaga","all","delay","fork","put","takeEvery","takeLatest","axios","SELECT_TEAM_FAILURE","SELECT_TEAM_REQUEST","SELECT_TEAM_SUCCESS","ENROLL_TEAM_FAILURE","ENROLL_TEAM_REQUEST","ENROLL_TEAM_SUCCESS","LOAD_LIST_REQUEST","LOAD_LIST_SUCCESS","LOAD_LIST_FAILURE","SEARCH_TEAMS_REQUEST","SEARCH_TEAMS_SUCCESS","SEARCH_TEAMS_FAILURE","selectAPI","post","type","console","error","enrollAPI","Error","loadAPI","get","searchAPI","query","action"],"mappings":"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","sourcesContent":["import { all, delay, fork, put, takeEvery, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport {\n    SELECT_TEAM_FAILURE,\n    SELECT_TEAM_REQUEST,\n    SELECT_TEAM_SUCCESS,\n    ENROLL_TEAM_FAILURE,\n    ENROLL_TEAM_REQUEST,\n    ENROLL_TEAM_SUCCESS,\n    LOAD_LIST_REQUEST,\n    LOAD_LIST_SUCCESS,\n    LOAD_LIST_FAILURE,\n    SEARCH_TEAMS_REQUEST,\n    SEARCH_TEAMS_SUCCESS,\n    SEARCH_TEAMS_FAILURE,\n} from '../reducers/team';\n\nfunction selectAPI() {\n  // 서버에 요청을 보내는 부분\n    return axios.post('/team');\n}\n\nfunction* select() {\n    try {\n        // yield call(selectAPI);\n        yield delay(2000);\n        yield put({ // put은 dispatch 동일\n            type: SELECT_TEAM_SUCCESS,\n        });\n    } catch (e) {\n        console.error(e);\n        yield put({\n            type: SELECT_TEAM_FAILURE,\n            error:e,\n        });\n    }\n}\n\nfunction* watchSelect() {\n    yield takeEvery(SELECT_TEAM_REQUEST, select);\n}\n\nfunction enrollAPI() {\n  // 서버에 요청을 보내는 부분\n    return axios.post('/team/register');\n}\n\nfunction* enroll() {\n    try {\n        // yield call(enrollAPI);\n        yield delay(2000);\n        throw new Error('에러에러에러');\n        yield put({ // put은 dispatch 동일\n            type: ENROLL_TEAM_SUCCESS,\n        });\n    } catch (e) { // loginAPI 실패\n        console.error(e);\n        yield put({\n            type: ENROLL_TEAM_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction* watchEnroll() {\n    yield takeEvery(ENROLL_TEAM_REQUEST, enroll);\n}\n\nfunction loadAPI(){\n    return axios.get('/team/rank');\n}\nfunction* load(){\n    try{\n        // yield call(loadAPI);\n        yield delay(1000);\n        yield put({\n            type:LOAD_LIST_SUCCESS,\n        })\n    } catch (e) {\n        yield put({\n            type:LOAD_LIST_FAILURE,\n            error: e,\n        })\n    }\n}\nfunction* watchLoad(){\n    yield takeEvery(LOAD_LIST_REQUEST, load);\n}\n\nfunction searchAPI(query){\n    return axios.get(`team/search?q=${query}`);\n}\nfunction* search(action){\n    try{\n        //yield call(searchAPI(action.query));\n        yield delay(500);\n        yield put({\n            type:SEARCH_TEAMS_SUCCESS,\n        })\n    }catch (e) {\n        yield put({\n            type:SEARCH_TEAMS_FAILURE,\n            error:e,\n        })\n    }\n}\nfunction* watchSearch(){\n    yield takeLatest(SEARCH_TEAMS_REQUEST, search);\n}\nexport default function* userSaga() {\n    yield all([\n        fork(watchSelect),\n        fork(watchEnroll),\n        fork(watchLoad),\n        fork(watchSearch),\n    ]);\n}\n"]},"metadata":{},"sourceType":"module"}