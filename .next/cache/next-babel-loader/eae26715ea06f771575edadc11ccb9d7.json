{"ast":null,"code":"import { all, delay, fork, put, takeEvery, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { SELECT_TEAM_FAILURE, SELECT_TEAM_REQUEST, SELECT_TEAM_SUCCESS, ENROLL_TEAM_FAILURE, ENROLL_TEAM_REQUEST, ENROLL_TEAM_SUCCESS, LOAD_LIST_REQUEST, LOAD_LIST_SUCCESS, LOAD_LIST_FAILURE, SEARCH_TEAMS_REQUEST, SEARCH_TEAMS_SUCCESS, SEARCH_TEAMS_FAILURE } from '../reducers/team';\n\nfunction selectAPI() {\n  // 서버에 요청을 보내는 부분\n  return axios.post('/team');\n}\n\nfunction* select() {\n  try {\n    // yield call(selectAPI);\n    yield delay(2000);\n    yield put({\n      // put은 dispatch 동일\n      type: SELECT_TEAM_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: SELECT_TEAM_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchSelect() {\n  yield takeEvery(SELECT_TEAM_REQUEST, select);\n}\n\nfunction enrollAPI() {\n  // 서버에 요청을 보내는 부분\n  return axios.post('/team/register');\n}\n\nfunction* enroll() {\n  try {\n    // yield call(enrollAPI);\n    yield delay(2000);\n    throw new Error('에러에러에러');\n    yield put({\n      // put은 dispatch 동일\n      type: ENROLL_TEAM_SUCCESS\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: ENROLL_TEAM_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchEnroll() {\n  yield takeEvery(ENROLL_TEAM_REQUEST, enroll);\n}\n\nfunction loadAPI() {\n  return axios.get('/team/rank');\n}\n\nfunction* load() {\n  try {\n    // yield call(loadAPI);\n    yield delay(1000);\n    yield put({\n      type: LOAD_LIST_SUCCESS\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_LIST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoad() {\n  yield takeEvery(LOAD_LIST_REQUEST, load);\n}\n\nfunction searchAPI(query) {\n  return axios.get(`team/search?q=${query}`);\n}\n\nfunction* search(action) {\n  try {\n    //yield call(searchAPI(action.data.query));\n    yield delay(5000);\n    yield put({\n      type: SEARCH_TEAMS_SUCCESS\n    });\n  } catch (e) {\n    yield put({\n      type: SEARCH_TEAMS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchSearch() {\n  yield takeLatest(SEARCH_TEAMS_REQUEST, search);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchSelect), fork(watchEnroll), fork(watchLoad), fork(watchSearch)]);\n}","map":{"version":3,"sources":["/Users/kcho/Desktop/react-futchall/front/sagas/team.js"],"names":["all","delay","fork","put","takeEvery","takeLatest","axios","SELECT_TEAM_FAILURE","SELECT_TEAM_REQUEST","SELECT_TEAM_SUCCESS","ENROLL_TEAM_FAILURE","ENROLL_TEAM_REQUEST","ENROLL_TEAM_SUCCESS","LOAD_LIST_REQUEST","LOAD_LIST_SUCCESS","LOAD_LIST_FAILURE","SEARCH_TEAMS_REQUEST","SEARCH_TEAMS_SUCCESS","SEARCH_TEAMS_FAILURE","selectAPI","post","select","type","e","console","error","watchSelect","enrollAPI","enroll","Error","watchEnroll","loadAPI","get","load","watchLoad","searchAPI","query","search","action","watchSearch","userSaga"],"mappings":"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","sourcesContent":["import { all, delay, fork, put, takeEvery, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport {\n    SELECT_TEAM_FAILURE,\n    SELECT_TEAM_REQUEST,\n    SELECT_TEAM_SUCCESS,\n    ENROLL_TEAM_FAILURE,\n    ENROLL_TEAM_REQUEST,\n    ENROLL_TEAM_SUCCESS,\n    LOAD_LIST_REQUEST,\n    LOAD_LIST_SUCCESS,\n    LOAD_LIST_FAILURE,\n    SEARCH_TEAMS_REQUEST,\n    SEARCH_TEAMS_SUCCESS,\n    SEARCH_TEAMS_FAILURE,\n} from '../reducers/team';\n\nfunction selectAPI() {\n  // 서버에 요청을 보내는 부분\n    return axios.post('/team');\n}\n\nfunction* select() {\n    try {\n        // yield call(selectAPI);\n        yield delay(2000);\n        yield put({ // put은 dispatch 동일\n            type: SELECT_TEAM_SUCCESS,\n        });\n    } catch (e) {\n        console.error(e);\n        yield put({\n            type: SELECT_TEAM_FAILURE,\n            error:e,\n        });\n    }\n}\n\nfunction* watchSelect() {\n    yield takeEvery(SELECT_TEAM_REQUEST, select);\n}\n\nfunction enrollAPI() {\n  // 서버에 요청을 보내는 부분\n    return axios.post('/team/register');\n}\n\nfunction* enroll() {\n    try {\n        // yield call(enrollAPI);\n        yield delay(2000);\n        throw new Error('에러에러에러');\n        yield put({ // put은 dispatch 동일\n            type: ENROLL_TEAM_SUCCESS,\n        });\n    } catch (e) { // loginAPI 실패\n        console.error(e);\n        yield put({\n            type: ENROLL_TEAM_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction* watchEnroll() {\n    yield takeEvery(ENROLL_TEAM_REQUEST, enroll);\n}\n\nfunction loadAPI(){\n    return axios.get('/team/rank');\n}\nfunction* load(){\n    try{\n        // yield call(loadAPI);\n        yield delay(1000);\n        yield put({\n            type:LOAD_LIST_SUCCESS,\n        })\n    } catch (e) {\n        yield put({\n            type:LOAD_LIST_FAILURE,\n            error: e,\n        })\n    }\n}\nfunction* watchLoad(){\n    yield takeEvery(LOAD_LIST_REQUEST, load);\n}\n\nfunction searchAPI(query){\n    return axios.get(`team/search?q=${query}`);\n}\nfunction* search(action){\n    try{\n        //yield call(searchAPI(action.data.query));\n        yield delay(5000);\n        yield put({\n            type:SEARCH_TEAMS_SUCCESS,\n        })\n    }catch (e) {\n        yield put({\n            type:SEARCH_TEAMS_FAILURE,\n            error:e,\n        })\n    }\n}\nfunction* watchSearch(){\n    yield takeLatest(SEARCH_TEAMS_REQUEST, search);\n}\nexport default function* userSaga() {\n    yield all([\n        fork(watchSelect),\n        fork(watchEnroll),\n        fork(watchLoad),\n        fork(watchSearch),\n    ]);\n}\n"]},"metadata":{},"sourceType":"module"}