{"ast":null,"code":"import { all, delay, fork, put, takeEvery } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { SELECT_TEAM_FAILURE, SELECT_TEAM_REQUEST, SELECT_TEAM_SUCCESS, ENROLL_TEAM_FAILURE, ENROLL_TEAM_REQUEST, ENROLL_TEAM_SUCCESS } from '../reducers/team';\n\nfunction selectAPI() {\n  // 서버에 요청을 보내는 부분\n  return axios.post('/team');\n}\n\nfunction* select() {\n  try {\n    // yield call(selectAPI);\n    yield delay(2000);\n    yield put({\n      // put은 dispatch 동일\n      type: SELECT_TEAM_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: SELECT_TEAM_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchSelect() {\n  yield takeEvery(SELECT_TEAM_REQUEST, select);\n}\n\nfunction enrollAPI() {\n  // 서버에 요청을 보내는 부분\n  return axios.post('/team/register');\n}\n\nfunction* enroll() {\n  try {\n    // yield call(enrollAPI);\n    yield delay(2000);\n    throw new Error('에러에러에러');\n    yield put({\n      // put은 dispatch 동일\n      type: ENROLL_TEAM_SUCCESS\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: ENROLL_TEAM_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchEnroll() {\n  yield takeEvery(ENROLL_TEAM_REQUEST, enroll);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchSelect), fork(watchEnroll)]);\n}","map":{"version":3,"sources":["/Users/kcho/Desktop/react-futchall/front/sagas/team.js"],"names":["all","delay","fork","put","takeEvery","axios","SELECT_TEAM_FAILURE","SELECT_TEAM_REQUEST","SELECT_TEAM_SUCCESS","ENROLL_TEAM_FAILURE","ENROLL_TEAM_REQUEST","ENROLL_TEAM_SUCCESS","selectAPI","post","select","type","e","console","error","watchSelect","enrollAPI","enroll","Error","watchEnroll","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,KAAd,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,SAAhC,QAAiD,oBAAjD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACIC,mBADJ,EAEIC,mBAFJ,EAGIC,mBAHJ,EAIIC,mBAJJ,EAKIC,mBALJ,EAMIC,mBANJ,QAOO,kBAPP;;AASA,SAASC,SAAT,GAAqB;AACnB;AACE,SAAOP,KAAK,CAACQ,IAAN,CAAW,OAAX,CAAP;AACH;;AAED,UAAUC,MAAV,GAAmB;AACf,MAAI;AACA;AACA,UAAMb,KAAK,CAAC,IAAD,CAAX;AACA,UAAME,GAAG,CAAC;AAAE;AACRY,MAAAA,IAAI,EAAEP;AADA,KAAD,CAAT;AAGH,GAND,CAME,OAAOQ,CAAP,EAAU;AACRC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMb,GAAG,CAAC;AACNY,MAAAA,IAAI,EAAET,mBADA;AAENY,MAAAA,KAAK,EAACF;AAFA,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUG,WAAV,GAAwB;AACpB,QAAMf,SAAS,CAACG,mBAAD,EAAsBO,MAAtB,CAAf;AACH;;AAED,SAASM,SAAT,GAAqB;AACnB;AACE,SAAOf,KAAK,CAACQ,IAAN,CAAW,gBAAX,CAAP;AACH;;AAED,UAAUQ,MAAV,GAAmB;AACf,MAAI;AACA;AACA,UAAMpB,KAAK,CAAC,IAAD,CAAX;AACA,UAAM,IAAIqB,KAAJ,CAAU,QAAV,CAAN;AACA,UAAMnB,GAAG,CAAC;AAAE;AACRY,MAAAA,IAAI,EAAEJ;AADA,KAAD,CAAT;AAGH,GAPD,CAOE,OAAOK,CAAP,EAAU;AAAE;AACVC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMb,GAAG,CAAC;AACNY,MAAAA,IAAI,EAAEN,mBADA;AAENS,MAAAA,KAAK,EAAEF;AAFD,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUO,WAAV,GAAwB;AACpB,QAAMnB,SAAS,CAACM,mBAAD,EAAsBW,MAAtB,CAAf;AACH;;AAED,eAAe,UAAUG,QAAV,GAAqB;AAChC,QAAMxB,GAAG,CAAC,CACNE,IAAI,CAACiB,WAAD,CADE,EAENjB,IAAI,CAACqB,WAAD,CAFE,CAAD,CAAT;AAIH","sourcesContent":["import { all, delay, fork, put, takeEvery } from 'redux-saga/effects';\nimport axios from 'axios';\nimport {\n    SELECT_TEAM_FAILURE,\n    SELECT_TEAM_REQUEST,\n    SELECT_TEAM_SUCCESS,\n    ENROLL_TEAM_FAILURE,\n    ENROLL_TEAM_REQUEST,\n    ENROLL_TEAM_SUCCESS,\n} from '../reducers/team';\n\nfunction selectAPI() {\n  // 서버에 요청을 보내는 부분\n    return axios.post('/team');\n}\n\nfunction* select() {\n    try {\n        // yield call(selectAPI);\n        yield delay(2000);\n        yield put({ // put은 dispatch 동일\n            type: SELECT_TEAM_SUCCESS,\n        });\n    } catch (e) {\n        console.error(e);\n        yield put({\n            type: SELECT_TEAM_FAILURE,\n            error:e,\n        });\n    }\n}\n\nfunction* watchSelect() {\n    yield takeEvery(SELECT_TEAM_REQUEST, select);\n}\n\nfunction enrollAPI() {\n  // 서버에 요청을 보내는 부분\n    return axios.post('/team/register');\n}\n\nfunction* enroll() {\n    try {\n        // yield call(enrollAPI);\n        yield delay(2000);\n        throw new Error('에러에러에러');\n        yield put({ // put은 dispatch 동일\n            type: ENROLL_TEAM_SUCCESS,\n        });\n    } catch (e) { // loginAPI 실패\n        console.error(e);\n        yield put({\n            type: ENROLL_TEAM_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction* watchEnroll() {\n    yield takeEvery(ENROLL_TEAM_REQUEST, enroll);\n}\n\nexport default function* userSaga() {\n    yield all([\n        fork(watchSelect),\n        fork(watchEnroll),\n    ]);\n}\n"]},"metadata":{},"sourceType":"module"}