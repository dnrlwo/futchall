{"ast":null,"code":"var _jsxFileName = \"/Users/kcho/Desktop/react-futchall/front/components/Maps.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { message } from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\n\nconst Maps = () => {\n  async function getLocation() {\n    function locc() {\n      return new Promise((resolve, reject) => {\n        if (navigator.geolocation) {\n          navigator.geolocation.getCurrentPosition(function (pos) {\n            lat = pos.coords.latitude;\n            lng = pos.coords.longitude; // console.log(\"1\");\n\n            resolve([\"success\", \"현재 접속위치를 중심으로 지도를 활성화하였습니다.\", pos.coords.latitude, pos.coords.longitude]);\n          }, function () {\n            // console.log(\"2\");\n            resolve([\"warn\", \"위치정보제공을 동의하시고 현재위치 주변 구장을 확인하세요.\"]);\n          });\n        } else {\n          // console.log(\"3\");\n          resolve([\"error\", \"현재 브라우저에서는 현재위치 사용이 불가능합니다.\"]);\n        }\n      });\n    }\n\n    ;\n    return await locc();\n  }\n\n  useEffect(() => {\n    // 지도 위치에 따른 데이터 가져와야 해 redux-saga\n    let lat = '37.5795876';\n    let lng = '126.9636324';\n    const container = document.getElementById(\"mapContainer\");\n    let options;\n    let map;\n    let arr = getLocation();\n\n    if (arr[0] === \"success\") {\n      lat = arr[2];\n      lng = arr[3];\n      message.success(arr[1]);\n    } else if (arr[0] === \"warn\") {\n      message.warn(arr[1]);\n    } else {\n      message.error(arr[1]);\n    }\n\n    options = {\n      center: new kakao.maps.LatLng(lat, lng),\n      level: 5\n    };\n    map = new kakao.maps.Map(container, options); // function fetchItems() {\n    //     return new Promise(function (resolve, reject) {\n    //         var items = [1, 2, 3];\n    //         resolve(items)\n    //     });\n    // }\n    // async function logItems() {\n    //     var resultItems = await fetchItems();\n    //     console.log(resultItems); // [1,2,3]\n    // }\n    // console.log(\"before async\");\n    // (async () => {\n    //     console.log(\"in async\");\n    //     await (() => {\n    //         return new Promise((resolve, reject) => {\n    //         });\n    //     });\n    //     console.log(\"end await\");\n    //     // message.success(result[1]);\n    // })().then(console.log(\"in then\"))\n    // console.log(\"after async\");\n    // if (navigator.geolocation) {\n    //     navigator.geolocation.getCurrentPosition(function (pos) {\n    //         lat = pos.coords.latitude;     // 위도\n    //         lng = pos.coords.longitude; // 경도\n    //         options = {\n    //             center: new kakao.maps.LatLng(lat, lng),\n    //             level: 5\n    //         };\n    //         map = new kakao.maps.Map(container, options);\n    //         message.success(\"현재 접속위치를 중심으로 지도를 활성화하였습니다.\");\n    //         // const mapTypeControl = new kakao.maps.MapTypeControl();\n    //         // map.addControl(mapTypeControl, kakao.maps.ControlPosition.TOPRIGHT);\n    //     }, function () {\n    //         options = {\n    //             center: new kakao.maps.LatLng(lat, lng),\n    //             level: 5\n    //         };\n    //         map = new kakao.maps.Map(container, options);\n    //         message.warn(\"위치정보제공을 동의하시고 현재위치 주변 구장을 확인하세요.\");\n    //     });\n    // } else {\n    //     options = {\n    //         center: new kakao.maps.LatLng(lat, lng),\n    //         level: 5\n    //     };\n    //     map = new kakao.maps.Map(container, options);\n    //     message.error(\"현재 브라우저에서는 현재위치 사용이 불가능합니다.\");\n    // }\n    // // 마커 클러스터러를 생성합니다 \n    // var clusterer = new kakao.maps.MarkerClusterer({\n    //     map: map, // 마커들을 클러스터로 관리하고 표시할 지도 객체 \n    //     averageCenter: true, // 클러스터에 포함된 마커들의 평균 위치를 클러스터 마커 위치로 설정 \n    //     minLevel: 10 // 클러스터 할 최소 지도 레벨 \n    // });\n    // // 데이터를 가져오기 위해 jQuery를 사용합니다\n    // // 데이터를 가져와 마커를 생성하고 클러스터러 객체에 넘겨줍니다\n    // $.get(\"/download/web/data/chicken.json\", function (data) {\n    //     // 데이터에서 좌표 값을 가지고 마커를 표시합니다\n    //     // 마커 클러스터러로 관리할 마커 객체는 생성할 때 지도 객체를 설정하지 않습니다\n    //     var markers = $(data.positions).map(function (i, position) {\n    //         return new kakao.maps.Marker({\n    //             position: new kakao.maps.LatLng(position.lat, position.lng)\n    //         });\n    //     });\n    //     // 클러스터러에 마커들을 추가합니다\n    //     clusterer.addMarkers(markers);\n    // });\n  });\n  return __jsx(\"div\", {\n    id: \"mapContainer\",\n    style: {\n      height: '70vh',\n      textAlign: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }\n  }, __jsx(LoadingOutlined, {\n    style: {\n      margin: '0 auto',\n      width: '10vh',\n      height: '10vh'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default Maps;","map":{"version":3,"sources":["/Users/kcho/Desktop/react-futchall/front/components/Maps.js"],"names":["React","useState","useEffect","message","LoadingOutlined","Maps","getLocation","locc","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","pos","lat","coords","latitude","lng","longitude","container","document","getElementById","options","map","arr","success","warn","error","center","kakao","maps","LatLng","level","Map","height","textAlign","margin","width"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { message } from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\n\nconst Maps = () => {\n\n    async function getLocation() {\n        function locc() {\n            return new Promise((resolve, reject) => {\n                if (navigator.geolocation) {\n                    navigator.geolocation.getCurrentPosition(function (pos) {\n                        lat = pos.coords.latitude;\n                        lng = pos.coords.longitude;\n                        // console.log(\"1\");\n                        resolve([\"success\", \"현재 접속위치를 중심으로 지도를 활성화하였습니다.\", pos.coords.latitude, pos.coords.longitude]);\n                    }, function () {\n                        // console.log(\"2\");\n                        resolve([\"warn\", \"위치정보제공을 동의하시고 현재위치 주변 구장을 확인하세요.\"]);\n                    });\n                } else {\n                    // console.log(\"3\");\n                    resolve([\"error\", \"현재 브라우저에서는 현재위치 사용이 불가능합니다.\"]);\n                }\n            });\n        };\n        return await locc();\n\n    }\n\n    useEffect(\n        () => {\n            // 지도 위치에 따른 데이터 가져와야 해 redux-saga\n            let lat = '37.5795876';\n            let lng = '126.9636324';\n            const container = document.getElementById(\"mapContainer\");\n            let options;\n            let map;\n            let arr = getLocation();\n            if (arr[0] === \"success\") {\n                lat = arr[2];\n                lng = arr[3];\n                message.success(arr[1]);\n            } else if (arr[0] === \"warn\") {\n                message.warn(arr[1]);\n            } else {\n                message.error(arr[1]);\n            }\n            options = {\n                center: new kakao.maps.LatLng(lat, lng),\n                level: 5\n            };\n            map = new kakao.maps.Map(container, options);\n            // function fetchItems() {\n            //     return new Promise(function (resolve, reject) {\n            //         var items = [1, 2, 3];\n            //         resolve(items)\n            //     });\n            // }\n\n            // async function logItems() {\n            //     var resultItems = await fetchItems();\n            //     console.log(resultItems); // [1,2,3]\n            // }\n            // console.log(\"before async\");\n            // (async () => {\n            //     console.log(\"in async\");\n            //     await (() => {\n            //         return new Promise((resolve, reject) => {\n\n            //         });\n            //     });\n            //     console.log(\"end await\");\n            //     // message.success(result[1]);\n            // })().then(console.log(\"in then\"))\n            // console.log(\"after async\");\n\n            // if (navigator.geolocation) {\n            //     navigator.geolocation.getCurrentPosition(function (pos) {\n            //         lat = pos.coords.latitude;     // 위도\n            //         lng = pos.coords.longitude; // 경도\n            //         options = {\n            //             center: new kakao.maps.LatLng(lat, lng),\n            //             level: 5\n            //         };\n            //         map = new kakao.maps.Map(container, options);\n            //         message.success(\"현재 접속위치를 중심으로 지도를 활성화하였습니다.\");\n            //         // const mapTypeControl = new kakao.maps.MapTypeControl();\n            //         // map.addControl(mapTypeControl, kakao.maps.ControlPosition.TOPRIGHT);\n            //     }, function () {\n            //         options = {\n            //             center: new kakao.maps.LatLng(lat, lng),\n            //             level: 5\n            //         };\n            //         map = new kakao.maps.Map(container, options);\n            //         message.warn(\"위치정보제공을 동의하시고 현재위치 주변 구장을 확인하세요.\");\n            //     });\n            // } else {\n            //     options = {\n            //         center: new kakao.maps.LatLng(lat, lng),\n            //         level: 5\n            //     };\n            //     map = new kakao.maps.Map(container, options);\n            //     message.error(\"현재 브라우저에서는 현재위치 사용이 불가능합니다.\");\n            // }\n\n            // // 마커 클러스터러를 생성합니다 \n            // var clusterer = new kakao.maps.MarkerClusterer({\n            //     map: map, // 마커들을 클러스터로 관리하고 표시할 지도 객체 \n            //     averageCenter: true, // 클러스터에 포함된 마커들의 평균 위치를 클러스터 마커 위치로 설정 \n            //     minLevel: 10 // 클러스터 할 최소 지도 레벨 \n            // });\n\n            // // 데이터를 가져오기 위해 jQuery를 사용합니다\n            // // 데이터를 가져와 마커를 생성하고 클러스터러 객체에 넘겨줍니다\n            // $.get(\"/download/web/data/chicken.json\", function (data) {\n            //     // 데이터에서 좌표 값을 가지고 마커를 표시합니다\n            //     // 마커 클러스터러로 관리할 마커 객체는 생성할 때 지도 객체를 설정하지 않습니다\n            //     var markers = $(data.positions).map(function (i, position) {\n            //         return new kakao.maps.Marker({\n            //             position: new kakao.maps.LatLng(position.lat, position.lng)\n            //         });\n            //     });\n\n            //     // 클러스터러에 마커들을 추가합니다\n            //     clusterer.addMarkers(markers);\n            // });\n        }\n    );\n    return (\n        <div id=\"mapContainer\" style={{ height: '70vh', textAlign: 'center' }}>\n            <LoadingOutlined style={{ margin: '0 auto', width: '10vh', height: '10vh' }} />\n        </div>\n    );\n};\n\nexport default Maps;"]},"metadata":{},"sourceType":"module"}