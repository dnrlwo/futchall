{"ast":null,"code":"var _jsxFileName = \"/Users/kcho/Desktop/react-futchall/front/components/Maps.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport { withRouter } from 'next/router';\nimport Link from 'next/link';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { REFRESH_STADIUMLIST_REQUEST } from '../reducers/location';\nimport { notification, message } from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\n\nconst Maps = props => {\n  const stadiumList = props.list;\n  const {\n    0: map,\n    1: setMap\n  } = useState();\n  const {\n    latitude,\n    longitude\n  } = useSelector(state => state.location);\n  const dispatch = useDispatch();\n  let options;\n  let temp;\n\n  function closeOverlay() {\n    overlay.setMap(null);\n  }\n\n  useEffect(() => {\n    //최초 마운트 시\n    options = {\n      center: new kakao.maps.LatLng(latitude, longitude),\n      level: 8\n    };\n    temp = new kakao.maps.Map(document.getElementById(\"mapContainer\"), options);\n    temp.addControl(new kakao.maps.MapTypeControl(), kakao.maps.ControlPosition.TOPRIGHT);\n    kakao.maps.event.addListener(temp, 'dragend', function () {\n      let latlng = temp.getCenter();\n      dispatch({\n        type: REFRESH_STADIUMLIST_REQUEST,\n        data: {\n          latitude: latlng.getLat(),\n          longitude: latlng.getLng()\n        }\n      });\n    });\n    setMap(temp);\n\n    if (props.router.query.arr) {\n      const arr = props.router.query.arr.split(\",\");\n\n      if (arr[0] === \"success\") {\n        message.success(arr[1]);\n      } else if (arr[0] === \"warn\") {\n        notification.destroy();\n        notification.open({\n          message: \"현재위치로 탐색하시려면?\",\n          description: \"이전에 위치정보 제공을 동의하시지 않은 경우, 주소창 앞 자물쇠 버튼을 클릭하여 수정하여 주세요.(Internet Explorer에서는 사용하실 수 없습니다.)\",\n          duration: 0\n        });\n      } else {\n        message.error(arr[1], 4);\n      }\n    }\n  }, []);\n  useEffect(() => {\n    stadiumList.forEach(c => {\n      var _temp;\n\n      let position = new kakao.maps.LatLng(c.lat, c.lng);\n      let marker = new kakao.maps.Marker({\n        map: (_temp = temp) !== null && _temp !== void 0 ? _temp : map,\n        position: position\n      });\n      let customOverlay = new daum.maps.CustomOverlay({\n        position: marker.getPosition()\n      });\n      let content = `<div class=\"wrap\" style=\"background:white\"> \n                    <div class=\"info\"> \n                        <div class=\"title\"> \n                            ${c.title} \n                            <div class=\"close\" onclick=\"closeOverlay()\" title=\"닫기\">X</div> \n                        </div> \n                        <div class=\"body\"> \n                            <div class=\"desc\"> \n                                <div class=\"ellipsis\">${c.address}</div> \n                                <div>${__jsx(Link, {\n        href: \"/stadium/[id]\",\n        as: `/stadium/${c.req}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 40\n        }\n      }, __jsx(\"a\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 93\n        }\n      }, \"\\uAD6C\\uC7A5 \\uD655\\uC778\\uD558\\uAE30\"))}</div> \n                            </div> \n                        </div> \n                    </div> \n                </div>`; // let content = document.createElement('div');\n      // let infoSpan = document.createElement('span');\n      // infoSpan.appendChild(document.createTextNode(c.title));\n      // content.appendChild(infoSpan);\n      // let closeBtn = document.createElement('button');\n      // closeBtn.appendChild(document.createTextNode('닫기'));\n      // closeBtn.onclick = function() { customOverlay.setMap(null); };\n      // content.appendChild(closeBtn);\n\n      customOverlay.setContent(content);\n      customOverlay.setMap(null);\n\n      (function (marker, customOverlay) {\n        kakao.maps.event.addListener(marker, 'click', function () {\n          var _temp2;\n\n          customOverlay.setMap((_temp2 = temp) !== null && _temp2 !== void 0 ? _temp2 : map);\n        });\n      })(marker, customOverlay);\n    });\n  }, [stadiumList]);\n  return __jsx(\"div\", {\n    id: \"mapContainer\",\n    style: {\n      height: '70vh',\n      textAlign: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, __jsx(LoadingOutlined, {\n    style: {\n      margin: '0 auto',\n      width: '10vh',\n      height: '10vh'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default withRouter(Maps);","map":{"version":3,"sources":["/Users/kcho/Desktop/react-futchall/front/components/Maps.js"],"names":["React","useEffect","useState","withRouter","Link","useSelector","useDispatch","REFRESH_STADIUMLIST_REQUEST","notification","message","LoadingOutlined","Maps","props","stadiumList","list","map","setMap","latitude","longitude","state","location","dispatch","options","temp","closeOverlay","overlay","center","kakao","maps","LatLng","level","Map","document","getElementById","addControl","MapTypeControl","ControlPosition","TOPRIGHT","event","addListener","latlng","getCenter","type","data","getLat","getLng","router","query","arr","split","success","destroy","open","description","duration","error","forEach","c","position","lat","lng","marker","Marker","customOverlay","daum","CustomOverlay","getPosition","content","title","address","req","setContent","height","textAlign","margin","width"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { withRouter } from 'next/router';\nimport Link from 'next/link';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { REFRESH_STADIUMLIST_REQUEST } from '../reducers/location';\nimport { notification, message } from 'antd';\nimport { LoadingOutlined,} from '@ant-design/icons';\n\nconst Maps = (props) => {\n    const  stadiumList  = props.list;\n    const [map, setMap] = useState();\n    const { latitude, longitude,} = useSelector(state => state.location);\n    const dispatch = useDispatch();\n    \n    let options;\n    let temp;\n\n    function closeOverlay() {\n        overlay.setMap(null);\n    }\n    useEffect(\n        () => {\n            //최초 마운트 시\n            options = {\n                center: new kakao.maps.LatLng(latitude, longitude),\n                level: 8\n            };\n            temp = new kakao.maps.Map(document.getElementById(\"mapContainer\"), options);\n            temp.addControl(new kakao.maps.MapTypeControl(), kakao.maps.ControlPosition.TOPRIGHT);\n            kakao.maps.event.addListener(temp, 'dragend', function () {\n                let latlng = temp.getCenter();\n                dispatch({ type:REFRESH_STADIUMLIST_REQUEST , data:{latitude: latlng.getLat(), longitude: latlng.getLng()} });\n            });\n            setMap(temp);\n            if (props.router.query.arr) {\n                const arr = props.router.query.arr.split(\",\");\n                if (arr[0] === \"success\") {\n                    message.success(arr[1]);\n                } else if (arr[0] === \"warn\") {\n                    notification.destroy();\n                    notification.open({ message: \"현재위치로 탐색하시려면?\", description: \"이전에 위치정보 제공을 동의하시지 않은 경우, 주소창 앞 자물쇠 버튼을 클릭하여 수정하여 주세요.(Internet Explorer에서는 사용하실 수 없습니다.)\", duration: 0 })\n                } else {\n                    message.error(arr[1], 4);\n                }\n            }\n        }, []\n    );\n    useEffect(() => {\n        stadiumList.forEach((c) => {\n            let position = new kakao.maps.LatLng(c.lat, c.lng);\n            let marker = new kakao.maps.Marker(\n                {\n                    map: temp ?? map,\n                    position: position\n                }\n            )\n            let customOverlay = new daum.maps.CustomOverlay({\n                position: marker.getPosition()\n            });\n\n            let content = `<div class=\"wrap\" style=\"background:white\"> \n                    <div class=\"info\"> \n                        <div class=\"title\"> \n                            ${c.title} \n                            <div class=\"close\" onclick=\"closeOverlay()\" title=\"닫기\">X</div> \n                        </div> \n                        <div class=\"body\"> \n                            <div class=\"desc\"> \n                                <div class=\"ellipsis\">${c.address}</div> \n                                <div>${<Link href=\"/stadium/[id]\" as={`/stadium/${c.req}`} ><a>구장 확인하기</a></Link>}</div> \n                            </div> \n                        </div> \n                    </div> \n                </div>`;\n\n            // let content = document.createElement('div');\n\n            // let infoSpan = document.createElement('span');\n            // infoSpan.appendChild(document.createTextNode(c.title));\n            // content.appendChild(infoSpan);\n            \n            // let closeBtn = document.createElement('button');\n            // closeBtn.appendChild(document.createTextNode('닫기'));\n            // closeBtn.onclick = function() { customOverlay.setMap(null); };\n            // content.appendChild(closeBtn);\n            \n            customOverlay.setContent(content);\n            customOverlay.setMap(null);\n\n            (function (marker, customOverlay) {\n                kakao.maps.event.addListener(marker, 'click', function () {\n                    customOverlay.setMap(temp ?? map);\n                });\n            })(marker, customOverlay);\n        })\n    }, [stadiumList])\n    return (\n        <div id=\"mapContainer\" style={{ height: '70vh', textAlign: 'center' }}>\n            <LoadingOutlined style={{ margin: '0 auto', width: '10vh', height: '10vh' }} />\n        </div>\n    );\n};\n\nexport default withRouter(Maps);"]},"metadata":{},"sourceType":"module"}