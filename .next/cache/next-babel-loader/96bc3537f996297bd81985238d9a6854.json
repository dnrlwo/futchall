{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/kcho/Desktop/react-futchall/front/components/Maps.js\";\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { message } from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\nimport { getLocation } from '../util/getLocation';\nimport { useSetter } from '../util/useSetter';\n\nvar Maps = function Maps() {\n  var _useSetter = useSetter('37.5795876'),\n      _useSetter2 = _slicedToArray(_useSetter, 2),\n      lat = _useSetter2[0],\n      setLat = _useSetter2[1];\n\n  var _useSetter3 = useSetter('126.9636324'),\n      _useSetter4 = _slicedToArray(_useSetter3, 2),\n      lng = _useSetter4[0],\n      setLng = _useSetter4[1];\n\n  useEffect(function () {\n    // 지도 위치에 따른 데이터 가져와야 해 redux-saga\n    var container = document.getElementById(\"mapContainer\");\n    var options;\n    var map;\n    var mapTypeControl = new kakao.maps.MapTypeControl();\n\n    (function _callee() {\n      var arr;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(getLocation());\n\n            case 2:\n              arr = _context.sent;\n              console.log(arr);\n\n              if (arr[0] === \"success\") {\n                setLat(arr[2]);\n                setLng(arr[3]); // lat = arr[2];\n                // lng = arr[3];\n\n                message.success(arr[1]);\n              } else if (arr[0] === \"warn\") {\n                message.warn(arr[1], 4);\n              } else {\n                message.error(arr[1], 4);\n              }\n\n              options = {\n                center: new kakao.maps.LatLng(lat, lng),\n                level: 5\n              };\n              map = new kakao.maps.Map(container, options);\n              map.addControl(mapTypeControl, kakao.maps.ControlPosition.TOPRIGHT);\n              kakao.maps.event.addListener(map, 'dragend', function () {\n                var latlng = map.getCenter();\n                setLat(latlng.getLat());\n                setLng(latlng.getLng());\n              });\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })(); // getLocation().then((arr) => {\n    //     // console.log(arr);\n    //     if (arr[0] === \"success\") {\n    //         lat = arr[2];\n    //         lng = arr[3];\n    //         message.success(arr[1]);\n    //     } else if (arr[0] === \"warn\") {\n    //         message.warn(arr[1]);\n    //     } else {\n    //         message.error(arr[1]);\n    //     }\n    //     options = {\n    //         center: new kakao.maps.LatLng(lat, lng),\n    //         level: 5\n    //     };\n    //     map = new kakao.maps.Map(container, options);\n    //     map.addControl(mapTypeControl, kakao.maps.ControlPosition.TOPRIGHT);\n    // }\n    // );\n    // // 마커 클러스터러를 생성합니다 \n    // var clusterer = new kakao.maps.MarkerClusterer({\n    //     map: map, // 마커들을 클러스터로 관리하고 표시할 지도 객체 \n    //     averageCenter: true, // 클러스터에 포함된 마커들의 평균 위치를 클러스터 마커 위치로 설정 \n    //     minLevel: 10 // 클러스터 할 최소 지도 레벨 \n    // });\n    // // 데이터를 가져오기 위해 jQuery를 사용합니다\n    // // 데이터를 가져와 마커를 생성하고 클러스터러 객체에 넘겨줍니다\n    // $.get(\"/download/web/data/chicken.json\", function (data) {\n    //     // 데이터에서 좌표 값을 가지고 마커를 표시합니다\n    //     // 마커 클러스터러로 관리할 마커 객체는 생성할 때 지도 객체를 설정하지 않습니다\n    //     var markers = $(data.positions).map(function (i, position) {\n    //         return new kakao.maps.Marker({\n    //             position: new kakao.maps.LatLng(position.lat, position.lng)\n    //         });\n    //     });\n    //     // 클러스터러에 마커들을 추가합니다\n    //     clusterer.addMarkers(markers);\n    // });\n\n  });\n  return __jsx(\"div\", {\n    id: \"mapContainer\",\n    style: {\n      height: '70vh',\n      textAlign: 'center'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, __jsx(LoadingOutlined, {\n    style: {\n      margin: '0 auto',\n      width: '10vh',\n      height: '10vh'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default Maps;","map":{"version":3,"sources":["/Users/kcho/Desktop/react-futchall/front/components/Maps.js"],"names":["React","useState","useEffect","message","LoadingOutlined","getLocation","useSetter","Maps","lat","setLat","lng","setLng","container","document","getElementById","options","map","mapTypeControl","kakao","maps","MapTypeControl","arr","console","log","success","warn","error","center","LatLng","level","Map","addControl","ControlPosition","TOPRIGHT","event","addListener","latlng","getCenter","getLat","getLng","height","textAlign","margin","width"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { message } from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\nimport { getLocation } from '../util/getLocation';\nimport { useSetter } from '../util/useSetter';\nconst Maps = () => {\n    const [lat, setLat] = useSetter('37.5795876');\n    const [lng, setLng] = useSetter('126.9636324');\n    useEffect(\n        () => {\n            // 지도 위치에 따른 데이터 가져와야 해 redux-saga\n            const container = document.getElementById(\"mapContainer\");\n            let options;\n            let map;\n            const mapTypeControl = new kakao.maps.MapTypeControl();\n            (async () => {\n                const arr = await getLocation();\n                console.log(arr);\n                if (arr[0] === \"success\") {\n                    setLat(arr[2]);\n                    setLng(arr[3]);\n                    // lat = arr[2];\n                    // lng = arr[3];\n                    message.success(arr[1]);\n                } else if (arr[0] === \"warn\") {\n                    message.warn(arr[1], 4);\n                } else {\n                    message.error(arr[1], 4);\n                }\n                options = {\n                    center: new kakao.maps.LatLng(lat, lng),\n                    level: 5\n                };\n                map = new kakao.maps.Map(container, options);\n                map.addControl(mapTypeControl, kakao.maps.ControlPosition.TOPRIGHT);\n\n                kakao.maps.event.addListener(map, 'dragend', function () {\n                    let latlng = map.getCenter();\n                    setLat(latlng.getLat());\n                    setLng(latlng.getLng());\n\n                });\n\n            })();\n            // getLocation().then((arr) => {\n            //     // console.log(arr);\n            //     if (arr[0] === \"success\") {\n            //         lat = arr[2];\n            //         lng = arr[3];\n            //         message.success(arr[1]);\n            //     } else if (arr[0] === \"warn\") {\n            //         message.warn(arr[1]);\n            //     } else {\n            //         message.error(arr[1]);\n            //     }\n            //     options = {\n            //         center: new kakao.maps.LatLng(lat, lng),\n            //         level: 5\n            //     };\n            //     map = new kakao.maps.Map(container, options);\n            //     map.addControl(mapTypeControl, kakao.maps.ControlPosition.TOPRIGHT);\n            // }\n            // );\n\n            // // 마커 클러스터러를 생성합니다 \n            // var clusterer = new kakao.maps.MarkerClusterer({\n            //     map: map, // 마커들을 클러스터로 관리하고 표시할 지도 객체 \n            //     averageCenter: true, // 클러스터에 포함된 마커들의 평균 위치를 클러스터 마커 위치로 설정 \n            //     minLevel: 10 // 클러스터 할 최소 지도 레벨 \n            // });\n\n            // // 데이터를 가져오기 위해 jQuery를 사용합니다\n            // // 데이터를 가져와 마커를 생성하고 클러스터러 객체에 넘겨줍니다\n            // $.get(\"/download/web/data/chicken.json\", function (data) {\n            //     // 데이터에서 좌표 값을 가지고 마커를 표시합니다\n            //     // 마커 클러스터러로 관리할 마커 객체는 생성할 때 지도 객체를 설정하지 않습니다\n            //     var markers = $(data.positions).map(function (i, position) {\n            //         return new kakao.maps.Marker({\n            //             position: new kakao.maps.LatLng(position.lat, position.lng)\n            //         });\n            //     });\n\n            //     // 클러스터러에 마커들을 추가합니다\n            //     clusterer.addMarkers(markers);\n            // });\n        }\n    );\n    return (\n        <div id=\"mapContainer\" style={{ height: '70vh', textAlign: 'center' }}>\n            <LoadingOutlined style={{ margin: '0 auto', width: '10vh', height: '10vh' }} />\n        </div>\n    );\n};\n\nexport default Maps;"]},"metadata":{},"sourceType":"module"}