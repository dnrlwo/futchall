{"ast":null,"code":"var _jsxFileName = \"/Users/kcho/Desktop/react-futchall/front/components/Maps.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { message } from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\nimport { getLocation } from '../util/getLocation';\n\nconst Maps = () => {\n  useEffect(() => {\n    // 지도 위치에 따른 데이터 가져와야 해 redux-saga\n    let lat = '37.5795876';\n    let lng = '126.9636324';\n    const container = document.getElementById(\"mapContainer\");\n    let options;\n    let map;\n    const mapTypeControl = new kakao.maps.MapTypeControl();\n\n    (async () => {\n      console.log(\"in\");\n      const arr = await getLocation();\n      console.log(arr);\n\n      if (arr[0] === \"success\") {\n        lat = arr[2];\n        lng = arr[3];\n        message.success(arr[1]);\n      } else if (arr[0] === \"warn\") {\n        message.warn(arr[1]);\n      } else {\n        message.error(arr[1]);\n      }\n\n      options = {\n        center: new kakao.maps.LatLng(lat, lng),\n        level: 5\n      };\n      map = new kakao.maps.Map(container, options);\n      map.addControl(mapTypeControl, kakao.maps.ControlPosition.TOPRIGHT);\n    })(); // getLocation().then((arr) => {\n    //     // console.log(arr);\n    //     if (arr[0] === \"success\") {\n    //         lat = arr[2];\n    //         lng = arr[3];\n    //         message.success(arr[1]);\n    //     } else if (arr[0] === \"warn\") {\n    //         message.warn(arr[1]);\n    //     } else {\n    //         message.error(arr[1]);\n    //     }\n    //     options = {\n    //         center: new kakao.maps.LatLng(lat, lng),\n    //         level: 5\n    //     };\n    //     map = new kakao.maps.Map(container, options);\n    //     map.addControl(mapTypeControl, kakao.maps.ControlPosition.TOPRIGHT);\n    // }\n    // );\n    // // 마커 클러스터러를 생성합니다 \n    // var clusterer = new kakao.maps.MarkerClusterer({\n    //     map: map, // 마커들을 클러스터로 관리하고 표시할 지도 객체 \n    //     averageCenter: true, // 클러스터에 포함된 마커들의 평균 위치를 클러스터 마커 위치로 설정 \n    //     minLevel: 10 // 클러스터 할 최소 지도 레벨 \n    // });\n    // // 데이터를 가져오기 위해 jQuery를 사용합니다\n    // // 데이터를 가져와 마커를 생성하고 클러스터러 객체에 넘겨줍니다\n    // $.get(\"/download/web/data/chicken.json\", function (data) {\n    //     // 데이터에서 좌표 값을 가지고 마커를 표시합니다\n    //     // 마커 클러스터러로 관리할 마커 객체는 생성할 때 지도 객체를 설정하지 않습니다\n    //     var markers = $(data.positions).map(function (i, position) {\n    //         return new kakao.maps.Marker({\n    //             position: new kakao.maps.LatLng(position.lat, position.lng)\n    //         });\n    //     });\n    //     // 클러스터러에 마커들을 추가합니다\n    //     clusterer.addMarkers(markers);\n    // });\n\n  });\n  return __jsx(\"div\", {\n    id: \"mapContainer\",\n    style: {\n      height: '70vh',\n      textAlign: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, __jsx(LoadingOutlined, {\n    style: {\n      margin: '0 auto',\n      width: '10vh',\n      height: '10vh'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default Maps;","map":{"version":3,"sources":["/Users/kcho/Desktop/react-futchall/front/components/Maps.js"],"names":["React","useState","useEffect","message","LoadingOutlined","getLocation","Maps","lat","lng","container","document","getElementById","options","map","mapTypeControl","kakao","maps","MapTypeControl","console","log","arr","success","warn","error","center","LatLng","level","Map","addControl","ControlPosition","TOPRIGHT","height","textAlign","margin","width"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,MAAxB;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA,SAASC,WAAT,QAA4B,qBAA5B;;AACA,MAAMC,IAAI,GAAG,MAAM;AACfJ,EAAAA,SAAS,CACL,MAAM;AACF;AACA,QAAIK,GAAG,GAAG,YAAV;AACA,QAAIC,GAAG,GAAG,aAAV;AACA,UAAMC,SAAS,GAAGC,QAAQ,CAACC,cAAT,CAAwB,cAAxB,CAAlB;AACA,QAAIC,OAAJ;AACA,QAAIC,GAAJ;AACA,UAAMC,cAAc,GAAG,IAAIC,KAAK,CAACC,IAAN,CAAWC,cAAf,EAAvB;;AACA,KAAC,YAAY;AACTC,MAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACA,YAAMC,GAAG,GAAG,MAAMf,WAAW,EAA7B;AACAa,MAAAA,OAAO,CAACC,GAAR,CAAYC,GAAZ;;AACA,UAAIA,GAAG,CAAC,CAAD,CAAH,KAAW,SAAf,EAA0B;AACtBb,QAAAA,GAAG,GAAGa,GAAG,CAAC,CAAD,CAAT;AACAZ,QAAAA,GAAG,GAAGY,GAAG,CAAC,CAAD,CAAT;AACAjB,QAAAA,OAAO,CAACkB,OAAR,CAAgBD,GAAG,CAAC,CAAD,CAAnB;AACH,OAJD,MAIO,IAAIA,GAAG,CAAC,CAAD,CAAH,KAAW,MAAf,EAAuB;AAC1BjB,QAAAA,OAAO,CAACmB,IAAR,CAAaF,GAAG,CAAC,CAAD,CAAhB;AACH,OAFM,MAEA;AACHjB,QAAAA,OAAO,CAACoB,KAAR,CAAcH,GAAG,CAAC,CAAD,CAAjB;AACH;;AACDR,MAAAA,OAAO,GAAG;AACNY,QAAAA,MAAM,EAAE,IAAIT,KAAK,CAACC,IAAN,CAAWS,MAAf,CAAsBlB,GAAtB,EAA2BC,GAA3B,CADF;AAENkB,QAAAA,KAAK,EAAE;AAFD,OAAV;AAIAb,MAAAA,GAAG,GAAG,IAAIE,KAAK,CAACC,IAAN,CAAWW,GAAf,CAAmBlB,SAAnB,EAA8BG,OAA9B,CAAN;AACAC,MAAAA,GAAG,CAACe,UAAJ,CAAed,cAAf,EAA+BC,KAAK,CAACC,IAAN,CAAWa,eAAX,CAA2BC,QAA1D;AACH,KAnBD,IARE,CA4BF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AACH,GAtEI,CAAT;AAwEA,SACI;AAAK,IAAA,EAAE,EAAC,cAAR;AAAuB,IAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAE,MAAV;AAAkBC,MAAAA,SAAS,EAAE;AAA7B,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,eAAD;AAAiB,IAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAE,QAAV;AAAoBC,MAAAA,KAAK,EAAE,MAA3B;AAAmCH,MAAAA,MAAM,EAAE;AAA3C,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAKH,CA9ED;;AAgFA,eAAezB,IAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { message } from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\nimport { getLocation } from '../util/getLocation';\nconst Maps = () => {\n    useEffect(\n        () => {\n            // 지도 위치에 따른 데이터 가져와야 해 redux-saga\n            let lat = '37.5795876';\n            let lng = '126.9636324';\n            const container = document.getElementById(\"mapContainer\");\n            let options;\n            let map;\n            const mapTypeControl = new kakao.maps.MapTypeControl();\n            (async () => {\n                console.log(\"in\");\n                const arr = await getLocation();\n                console.log(arr);\n                if (arr[0] === \"success\") {\n                    lat = arr[2];\n                    lng = arr[3];\n                    message.success(arr[1]);\n                } else if (arr[0] === \"warn\") {\n                    message.warn(arr[1]);\n                } else {\n                    message.error(arr[1]);\n                }\n                options = {\n                    center: new kakao.maps.LatLng(lat, lng),\n                    level: 5\n                };\n                map = new kakao.maps.Map(container, options);\n                map.addControl(mapTypeControl, kakao.maps.ControlPosition.TOPRIGHT);\n            })();\n            // getLocation().then((arr) => {\n            //     // console.log(arr);\n            //     if (arr[0] === \"success\") {\n            //         lat = arr[2];\n            //         lng = arr[3];\n            //         message.success(arr[1]);\n            //     } else if (arr[0] === \"warn\") {\n            //         message.warn(arr[1]);\n            //     } else {\n            //         message.error(arr[1]);\n            //     }\n            //     options = {\n            //         center: new kakao.maps.LatLng(lat, lng),\n            //         level: 5\n            //     };\n            //     map = new kakao.maps.Map(container, options);\n            //     map.addControl(mapTypeControl, kakao.maps.ControlPosition.TOPRIGHT);\n            // }\n            // );\n\n            // // 마커 클러스터러를 생성합니다 \n            // var clusterer = new kakao.maps.MarkerClusterer({\n            //     map: map, // 마커들을 클러스터로 관리하고 표시할 지도 객체 \n            //     averageCenter: true, // 클러스터에 포함된 마커들의 평균 위치를 클러스터 마커 위치로 설정 \n            //     minLevel: 10 // 클러스터 할 최소 지도 레벨 \n            // });\n\n            // // 데이터를 가져오기 위해 jQuery를 사용합니다\n            // // 데이터를 가져와 마커를 생성하고 클러스터러 객체에 넘겨줍니다\n            // $.get(\"/download/web/data/chicken.json\", function (data) {\n            //     // 데이터에서 좌표 값을 가지고 마커를 표시합니다\n            //     // 마커 클러스터러로 관리할 마커 객체는 생성할 때 지도 객체를 설정하지 않습니다\n            //     var markers = $(data.positions).map(function (i, position) {\n            //         return new kakao.maps.Marker({\n            //             position: new kakao.maps.LatLng(position.lat, position.lng)\n            //         });\n            //     });\n\n            //     // 클러스터러에 마커들을 추가합니다\n            //     clusterer.addMarkers(markers);\n            // });\n        }\n    );\n    return (\n        <div id=\"mapContainer\" style={{ height: '70vh', textAlign: 'center' }}>\n            <LoadingOutlined style={{ margin: '0 auto', width: '10vh', height: '10vh' }} />\n        </div>\n    );\n};\n\nexport default Maps;"]},"metadata":{},"sourceType":"module"}